# Additional Analytics endpoints
  /analytics/trends:
    get:
      summary: Analyze trends
      description: Analyze trends for a specific metric over time
      tags:
        - Analytics
      parameters:
        - in: query
          name: metricName
          required: true
          schema:
            type: string
          description: Name of the metric to analyze
        - in: query
          name: period
          schema:
            type: string
            enum: [day, week, month, quarter, year]
            default: day
          description: Time period to aggregate data by
        - in: query
          name: duration
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
          description: Number of periods to analyze
      responses:
        '200':
          description: Trend analysis
          content:
            application/json:
              schema:
                type: object
                properties:
                  metric:
                    type: string
                  period:
                    type: string
                    enum: [day, week, month, quarter, year]
                  dataPoints:
                    type: array
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          format: date-time
                        value:
                          type: number
                      required:
                        - timestamp
                        - value
                  growth:
                    type: number
                    format: float
                  volatility:
                    type: number
                    format: float
                  forecast:
                    type: array
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          format: date-time
                        value:
                          type: number
                      required:
                        - timestamp
                        - value
                required:
                  - metric
                  - period
                  - dataPoints
                  - growth
                  - volatility
                  - forecast
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /analytics/reports/custom:
    post:
      summary: Generate custom report
      description: Generate a custom report based on specified metrics
      tags:
        - Analytics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metrics:
                  type: array
                  items:
                    type: string
                filters:
                  type: object
                groupBy:
                  type: string
              required:
                - metrics
      responses:
        '200':
          description: Custom report data
          content:
            application/json:
              schema:
                type: object
                properties:
                  generatedAt:
                    type: string
                    format: date-time
                  metrics:
                    type: array
                    items:
                      type: string
                  filters:
                    type: object
                  groupBy:
                    type: string
                required:
                  - generatedAt
                  - metrics
        '400':
          description: Invalid report parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /analytics/system/compliance:
    get:
      summary: Get compliance report
      description: Get compliance reports for security auditing
      tags:
        - Analytics
      parameters:
        - in: query
          name: startDate
          required: true
          schema:
            type: string
            format: date-time
          description: Start date for the report
        - in: query
          name: endDate
          required: true
          schema:
            type: string
            format: date-time
          description: End date for the report
      responses:
        '200':
          description: Compliance report
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalSystemEvents:
                    type: integer
                  userActionsByType:
                    type: object
                    additionalProperties:
                      type: integer
                  securityEvents:
                    type: array
                    items:
                      $ref: '#/components/schemas/ActivityLog'
                  unusualActivities:
                    type: array
                    items:
                      $ref: '#/components/schemas/ActivityLog'
                  reportGeneratedAt:
                    type: string
                    format: date-time
                required:
                  - totalSystemEvents
                  - userActionsByType
                  - securityEvents
                  - unusualActivities
                  - reportGeneratedAt
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Moderation endpoints 
  /moderation/reports:
    post:
      summary: Report content
      description: Report content for moderation
      tags:
        - Moderation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityId:
                  type: string
                  format: uuid
                entityType:
                  type: string
                  enum: [user, post, comment, media, message, group]
                reason:
                  type: string
                details:
                  type: string
              required:
                - entityId
                - entityType
                - reason
      responses:
        '201':
          description: Report submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [pending, reviewing, resolved, rejected]
                  createdAt:
                    type: string
                    format: date-time
                required:
                  - id
                  - status
                  - createdAt
        '400':
          description: Invalid report data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Get reports
      description: Get content reports
      tags:
        - Moderation
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, reviewing, resolved, rejected]
          description: Filter by status
        - in: query
          name: entityType
          schema:
            type: string
            enum: [user, post, comment, media, message, group]
          description: Filter by entity type
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of reports
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            entityId:
                              type: string
                              format: uuid
                            entityType:
                              type: string
                            reporterId:
                              type: string
                              format: uuid
                            reason:
                              type: string
                            details:
                              type: string
                            status:
                              type: string
                              enum: [pending, reviewing, resolved, rejected]
                            createdAt:
                              type: string
                              format: date-time
                          required:
                            - id
                            - entityId
                            - entityType
                            - reporterId
                            - reason
                            - status
                            - createdAt
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /moderation/reports/{id}:
    put:
      summary: Update report status
      description: Update the status of a content report
      tags:
        - Moderation
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Report ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, reviewing, resolved, rejected]
                notes:
                  type: string
              required:
                - status
      responses:
        '200':
          description: Report status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [pending, reviewing, resolved, rejected]
                  updatedAt:
                    type: string
                    format: date-time
                required:
                  - id
                  - status
                  - updatedAt
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Report not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /moderation/actions:
    post:
      summary: Create moderation action
      description: Take a moderation action against content or user
      tags:
        - Moderation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityId:
                  type: string
                  format: uuid
                entityType:
                  type: string
                  enum: [user, post, comment, media, message, group]
                actionType:
                  type: string
                  enum: [warn, suspend, ban, remove, restrict]
                duration:
                  type: integer
                  description: Duration in hours (for temporary actions)
                reason:
                  type: string
                notes:
                  type: string
              required:
                - entityId
                - entityType
                - actionType
                - reason
      responses:
        '201':
          description: Moderation action created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  entityId:
                    type: string
                    format: uuid
                  entityType:
                    type: string
                  actionType:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                required:
                  - id
                  - entityId
                  - entityType
                  - actionType
                  - createdAt
        '400':
          description: Invalid action data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /moderation/content/analyze:
    post:
      summary: Analyze content
      description: Analyze content for policy violations
      tags:
        - Moderation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                contentType:
                  type: string
                  enum: [text, image, video, audio]
                  default: text
                contextType:
                  type: string
                  enum: [post, comment, message, profile, username]
              required:
                - content
      responses:
        '200':
          description: Content analysis results
          content:
            application/json:
              schema:
                type: object
                properties:
                  safe:
                    type: boolean
                  categories:
                    type: object
                    additionalProperties:
                      type: number
                      format: float
                  flagged:
                    type: array
                    items:
                      type: string
                  recommended_action:
                    type: string
                    enum: [none, warn, block, review]
                  severity:
                    type: number
                    format: float
                required:
                  - safe
                  - categories
                  - flagged
                  - recommended_action
        '400':
          description: Invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Job management
  /jobs:
    post:
      summary: Create job
      description: Create a new background job
      tags:
        - Jobs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [
                    MEDIA_PROCESSING,
                    VIDEO_TRANSCODING,
                    IMAGE_OPTIMIZATION,
                    THUMBNAIL_GENERATION,
                    EMAIL_NOTIFICATION,
                    PUSH_NOTIFICATION,
                    FEED_GENERATION,
                    CONTENT_INDEXING,
                    USER_ONBOARDING,
                    ACCOUNT_CLEANUP,
                    DATABASE_BACKUP,
                    CACHE_MAINTENANCE,
                    REPORT_GENERATION
                  ]
                data:
                  type: object
                priority:
                  type: string
                  enum: [low, normal, medium, high, critical]
                  default: normal
                runAfter:
                  type: string
                  format: date-time
                maxRetries:
                  type: integer
                  default: 3
              required:
                - type
                - data
      responses:
        '202':
          description: Job created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  type:
                    type: string
                  status:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                required:
                  - id
                  - type
                  - status
                  - createdAt
        '400':
          description: Invalid job data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Get jobs
      description: Get jobs
      tags:
        - Jobs
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [queued, processing, completed, failed, cancelled]
          description: Filter by status
        - in: query
          name: type
          schema:
            type: string
          description: Filter by job type
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          description: Filter jobs from this date
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          description: Filter jobs until this date
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            type:
                              type: string
                            status:
                              type: string
                              enum: [queued, processing, completed, failed, cancelled]
                            createdAt:
                              type: string
                              format: date-time
                            startedAt:
                              type: string
                              format: date-time
                            completedAt:
                              type: string
                              format: date-time
                            error:
                              type: string
                            result:
                              type: object
                          required:
                            - id
                            - type
                            - status
                            - createdAt
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /jobs/{id}:
    get:
      summary: Get job
      description: Get a job by ID
      tags:
        - Jobs
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Job ID
      responses:
        '200':
          description: Job details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  type:
                    type: string
                  status:
                    type: string
                    enum: [queued, processing, completed, failed, cancelled]
                  data:
                    type: object
                  createdAt:
                    type: string
                    format: date-time
                  startedAt:
                    type: string
                    format: date-time
                  completedAt:
                    type: string
                    format: date-time
                  error:
                    type: string
                  result:
                    type: object
                  attemptsMade:
                    type: integer
                  maxRetries:
                    type: integer
                required:
                  - id
                  - type
                  - status
                  - createdAt
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Cancel job
      description: Cancel a job
      tags:
        - Jobs
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Job ID
      responses:
        '204':
          description: Job cancelled
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Job cannot be cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User onboarding
  /onboarding:
    post:
      summary: Start onboarding
      description: Start the onboarding workflow for a user
      tags:
        - Onboarding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                steps:
                  type: array
                  items:
                    type: string
                    enum: [welcome_email, create_default_profile, setup_preferences, recommend_connections]
              required:
                - userId
                - steps
      responses:
        '202':
          description: Onboarding started
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                  steps:
                    type: array
                    items:
                      type: string
                  status:
                    type: string
                    enum: [queued, processing]
                required:
                  - jobId
                  - steps
                  - status
        '400':
          description: Invalid onboarding request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /onboarding/{userId}/status:
    get:
      summary: Get onboarding status
      description: Get the onboarding status for a user
      tags:
        - Onboarding
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: Onboarding status
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    format: uuid
                  onboardingComplete:
                    type: boolean
                  currentStep:
                    type: string
                  completedSteps:
                    type: array
                    items:
                      type: string
                  pendingSteps:
                    type: array
                    items:
                      type: string
                  progress:
                    type: integer
                  startedAt:
                    type: string
                    format: date-time
                  completedAt:
                    type: string
                    format: date-time
                required:
                  - userId
                  - onboardingComplete
                  - progress
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /analytics/user/patterns:
    get:
      summary: Get user activity patterns
      description: Analyze user activity patterns
      tags:
        - Analytics
      parameters:
        - in: query
          name: userId
          schema:
            type: string
            format: uuid
          description: User ID (defaults to current user)
        - in: query
          name: days
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
          description: Number of days to analyze
      responses:
        '200':
          description: Activity patterns
          content:
            application/json:
              schema:
                type: object
                properties:
                  activityByDay:
                    type: object
                    additionalProperties:
                      type: integer
                  activityByHour:
                    type: object
                    additionalProperties:
                      type: integer
                  activityByType:
                    type: object
                    additionalProperties:
                      type: integer
                  totalActivities:
                    type: integer
                  averageActivitiesPerDay:
                    type: number
                    format: float
                  mostActiveDay:
                    type: string
                  mostActiveHour:
                    type: integer
                  mostFrequentActivityType:
                    type: string
                required:
                  - activityByDay
                  - activityByHour
                  - activityByType
                  - totalActivities
                  - averageActivitiesPerDay
                  - mostActiveDay
                  - mostActiveHour
                  - mostFrequentActivityType
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Role already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /roles/{id}:
    get:
      summary: Get role
      description: Get a role by ID
      tags:
        - Roles & Permissions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Role ID
      responses:
        '200':
          description: Role details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update role
      description: Update a role
      tags:
        - Roles & Permissions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Role ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                inheritsFrom:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid role data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Role name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete role
      description: Delete a role
      tags:
        - Roles & Permissions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Role ID
      responses:
        '204':
          description: Role deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Cannot delete role with dependencies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /permissions:
    get:
      summary: Get permissions
      description: Get available permissions
      tags:
        - Roles & Permissions
      responses:
        '200':
          description: List of permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create permission
      description: Create a new permission
      tags:
        - Roles & Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
              required:
                - name
      responses:
        '201':
          description: Permission created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          description: Invalid permission data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Permission already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /roles/{id}/permissions:
    get:
      summary: Get role permissions
      description: Get permissions assigned to a role
      tags:
        - Roles & Permissions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Role ID
      responses:
        '200':
          description: List of permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Assign permission
      description: Assign a permission to a role
      tags:
        - Roles & Permissions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Role ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissionId:
                  type: string
                  format: uuid
              required:
                - permissionId
      responses:
        '204':
          description: Permission assigned
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Role or permission not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Permission already assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Remove permission
      description: Remove a permission from a role
      tags:
        - Roles & Permissions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Role ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissionId:
                  type: string
                  format: uuid
              required:
                - permissionId
      responses:
        '204':
          description: Permission removed
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Role, permission, or assignment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Health check and system endpoints
  /health:
    get:
      summary: Health check
      description: Check the health of the API and its dependencies
      tags:
        - System
      security: []
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, degraded, unhealthy]
                  version:
                    type: string
                  uptime:
                    type: number
                    format: float
                  timestamp:
                    type: string
                    format: date-time
                  services:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                          enum: [ok, degraded, unhealthy]
                        latency:
                          type: number
                          format: float
                      required:
                        - status
                required:
                  - status
                  - version
                  - timestamp
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [degraded, unhealthy]
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        service:
                          type: string
                        message:
                          type: string
                        status:
                          type: string
                      required:
                        - service
                        - message
                        - status
                required:
                  - status
                  - errorsjson:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /analytics/content/performance:
    get:
      summary: Get content performance
      description: Get performance metrics for content
      tags:
        - Analytics
      parameters:
        - in: query
          name: contentId
          required: true
          schema:
            type: string
            format: uuid
          description: Content ID
        - in: query
          name: contentType
          required: true
          schema:
            type: string
            enum: [post, media]
          description: Content type
      responses:
        '200':
          description: Content performance metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  views:
                    type: integer
                  likes:
                    type: integer
                  comments:
                    type: integer
                  shares:
                    type: integer
                  saves:
                    type: integer
                  clickThroughRate:
                    type: number
                    format: float
                  avgTimeSpent:
                    type: number
                    format: float
                  engagementRate:
                    type: number
                    format: float
                  reachCount:
                    type: integer
                  impressionsCount:
                    type: integer
                required:
                  - id
                  - views
                  - likes
                  - comments
                  - shares
                  - engagementRate
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Content not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /analytics/engagement:
    get:
      summary: Get engagement metrics
      description: Get user engagement metrics
      tags:
        - Analytics
      parameters:
        - in: query
          name: userId
          schema:
            type: string
            format: uuid
          description: User ID (defaults to current user)
      responses:
        '200':
          description: Engagement metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  activeUsers:
                    type: object
                    properties:
                      daily:
                        type: integer
                      weekly:
                        type: integer
                      monthly:
                        type: integer
                    required:
                      - daily
                      - weekly
                      - monthly
                  sessionsPerUser:
                    type: number
                    format: float
                  avgSessionDuration:
                    type: integer
                  retentionRate:
                    type: object
                    properties:
                      day1:
                        type: number
                        format: float
                      day7:
                        type: number
                        format: float
                      day30:
                        type: number
                        format: float
                      day90:
                        type: number
                        format: float
                    required:
                      - day1
                      - day7
                      - day30
                      - day90
                  churnRate:
                    type: number
                    format: float
                  engagementRate:
                    type: number
                    format: float
                  contentInteractionsPerUser:
                    type: number
                    format: float
                required:
                  - id
                  - activeUsers
                  - sessionsPerUser
                  - retentionRate
                  - engagementRate
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /analytics/growth:
    get:
      summary: Get growth metrics
      description: Get platform growth metrics
      tags:
        - Analytics
      parameters:
        - in: query
          name: timeframe
          schema:
            type: string
            enum: [day, week, month]
            default: month
          description: Time frame for analysis
      responses:
        '200':
          description: Growth metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  newUsers:
                    type: object
                    properties:
                      daily:
                        type: integer
                      weekly:
                        type: integer
                      monthly:
                        type: integer
                      total:
                        type: integer
                    required:
                      - daily
                      - weekly
                      - monthly
                      - total
                  userGrowthRate:
                    type: number
                    format: float
                  contentGrowthRate:
                    type: number
                    format: float
                  conversionRates:
                    type: object
                    properties:
                      visitorToSignup:
                        type: number
                        format: float
                      signupToActive:
                        type: number
                        format: float
                      freeToSubscribed:
                        type: number
                        format: float
                    required:
                      - visitorToSignup
                      - signupToActive
                  acquisitionChannels:
                    type: object
                    additionalProperties:
                      type: integer
                  retentionByAcquisition:
                    type: object
                    additionalProperties:
                      type: number
                      format: float
                required:
                  - newUsers
                  - userGrowthRate
                  - contentGrowthRate
                  - conversionRates
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Geo
  /geo/location:
    get:
      summary: Get location by IP
      description: Get location information for an IP address
      tags:
        - Geo
      parameters:
        - in: query
          name: ip
          schema:
            type: string
          description: IP address (defaults to requester's IP)
      responses:
        '200':
          description: Location information
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/GeoLocation'
                  - type: object
                    properties:
                      ip:
                        type: string
                      isProxy:
                        type: boolean
                      isp:
                        type: string
                      organization:
                        type: string
                      asn:
                        type: integer
                    required:
                      - ip
        '400':
          description: Invalid IP address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /geo/coordinates:
    get:
      summary: Get location by coordinates
      description: Get location information from coordinates
      tags:
        - Geo
      parameters:
        - in: query
          name: latitude
          required: true
          schema:
            type: number
            format: double
          description: Latitude
        - in: query
          name: longitude
          required: true
          schema:
            type: number
            format: double
          description: Longitude
      responses:
        '200':
          description: Location information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoLocation'
        '400':
          description: Invalid coordinates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /geo/distance:
    get:
      summary: Calculate distance
      description: Calculate distance between two coordinates
      tags:
        - Geo
      parameters:
        - in: query
          name: fromLat
          required: true
          schema:
            type: number
            format: double
          description: From latitude
        - in: query
          name: fromLng
          required: true
          schema:
            type: number
            format: double
          description: From longitude
        - in: query
          name: toLat
          required: true
          schema:
            type: number
            format: double
          description: To latitude
        - in: query
          name: toLng
          required: true
          schema:
            type: number
            format: double
          description: To longitude
        - in: query
          name: unit
          schema:
            type: string
            enum: [km, mi]
            default: km
          description: Distance unit
      responses:
        '200':
          description: Distance calculation
          content:
            application/json:
              schema:
                type: object
                properties:
                  distance:
                    type: number
                    format: double
                  unit:
                    type: string
                    enum: [km, mi]
                  from:
                    type: object
                    properties:
                      latitude:
                        type: number
                        format: double
                      longitude:
                        type: number
                        format: double
                    required:
                      - latitude
                      - longitude
                  to:
                    type: object
                    properties:
                      latitude:
                        type: number
                        format: double
                      longitude:
                        type: number
                        format: double
                    required:
                      - latitude
                      - longitude
                required:
                  - distance
                  - unit
                  - from
                  - to
        '400':
          description: Invalid coordinates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Roles & Permissions
  /roles:
    get:
      summary: Get roles
      description: Get available roles
      tags:
        - Roles & Permissions
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create role
      description: Create a new role
      tags:
        - Roles & Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                inheritsFrom:
                  type: string
                  format: uuid
              required:
                - name
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid role data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/

  /groups/{id}/members:
    post:
      summary: Add member
      description: Add a member to a group
      tags:
        - Groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Group ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                role:
                  type: string
                  enum: [admin, member]
                  default: member
              required:
                - userId
      responses:
        '204':
          description: Member added
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Already a member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Get members
      description: Get members of a group
      tags:
        - Groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Group ID
        - in: query
          name: role
          schema:
            type: string
            enum: [admin, member]
          description: Filter by role
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of members
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Remove member
      description: Remove a member from a group
      tags:
        - Groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Group ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
              required:
                - userId
      responses:
        '204':
          description: Member removed
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group or member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{id}/join:
    post:
      summary: Join group
      description: Request to join a group
      tags:
        - Groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Group ID
      responses:
        '204':
          description: Joined group or request sent
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Cannot join this group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Already a member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{id}/leave:
    post:
      summary: Leave group
      description: Leave a group
      tags:
        - Groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Group ID
      responses:
        '204':
          description: Left group
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Cannot leave group (e.g., owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{id}/posts:
    post:
      summary: Create group post
      description: Create a post in a group
      tags:
        - Groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Group ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                title:
                  type: string
                mediaIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                tags:
                  type: array
                  items:
                    type: string
                metadata:
                  type: object
              required:
                - content
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid post data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not a member or permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Get group posts
      description: Get posts in a group
      tags:
        - Groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Group ID
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          description: Filter posts from this date
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          description: Filter posts until this date
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
          description: Filter by tags
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not a member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Notifications
  /notifications:
    get:
      summary: Get notifications
      description: Get notifications for the current user
      tags:
        - Notifications
      parameters:
        - in: query
          name: unreadOnly
          schema:
            type: boolean
            default: false
          description: Get only unread notifications
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Notification'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notifications/read:
    post:
      summary: Mark notifications as read
      description: Mark notifications as read
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - ids
      responses:
        '204':
          description: Notifications marked as read
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /notifications/all:
    post:
      summary: Mark all as read
      description: Mark all notifications as read
      tags:
        - Notifications
      responses:
        '204':
          description: All notifications marked as read
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Feed
  /feed:
    get:
      summary: Get main feed
      description: Get the main content feed for the current user
      tags:
        - Feed
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
          description: Cursor for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: Feed content
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  nextCursor:
                    type: string
                  hasMore:
                    type: boolean
                required:
                  - items
                  - hasMore
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /feed/discover:
    get:
      summary: Get discover feed
      description: Get a feed of discovery content for the current user
      tags:
        - Feed
      parameters:
        - in: query
          name: cursor
          schema:
            type: string
          description: Cursor for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: Discover feed content
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  nextCursor:
                    type: string
                  hasMore:
                    type: boolean
                required:
                  - items
                  - hasMore
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Search
  /search:
    get:
      summary: Global search
      description: Search across all content types
      tags:
        - Search
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          description: Search query
        - in: query
          name: types
          schema:
            type: array
            items:
              type: string
              enum: [user, post, group, media]
          explode: true
          style: form
          description: Content types to search
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserProfile'
                      total:
                        type: integer
                      hasMore:
                        type: boolean
                  posts:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Post'
                      total:
                        type: integer
                      hasMore:
                        type: boolean
                  groups:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Group'
                      total:
                        type: integer
                      hasMore:
                        type: boolean
                  media:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Media'
                      total:
                        type: integer
                      hasMore:
                        type: boolean
        '400':
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Analytics
  /analytics/activity:
    get:
      summary: Get activity log
      description: Get activity log for a user
      tags:
        - Analytics
      parameters:
        - in: query
          name: userId
          schema:
            type: string
            format: uuid
          description: User ID (defaults to current user)
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          description: Start date for activity
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          description: End date for activity
        - in: query
          name: types
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
          description: Activity types to include
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: Activity log
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/ActivityLog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/{id}/replies:
    get:
      summary: Get comment replies
      description: Get replies to a comment
      tags:
        - Comments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Comment ID
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of replies
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /likes:
    post:
      summary: Like entity
      description: Like a post, comment, or media
      tags:
        - Likes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityId:
                  type: string
                  format: uuid
                entityType:
                  type: string
                  enum: [post, comment, media]
              required:
                - entityId
                - entityType
      responses:
        '201':
          description: Like created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
        '400':
          description: Invalid like data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Unlike entity
      description: Remove a like from a post, comment, or media
      tags:
        - Likes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityId:
                  type: string
                  format: uuid
                entityType:
                  type: string
                  enum: [post, comment, media]
              required:
                - entityId
                - entityType
      responses:
        '204':
          description: Like removed
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Like not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /likes/{entityType}/{entityId}:
    get:
      summary: Get entity likes
      description: Get users who liked an entity
      tags:
        - Likes
      parameters:
        - in: path
          name: entityType
          required: true
          schema:
            type: string
            enum: [post, comment, media]
          description: Entity type
        - in: path
          name: entityId
          required: true
          schema:
            type: string
            format: uuid
          description: Entity ID
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of users who liked the entity
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /follow:
    post:
      summary: Follow user
      description: Follow another user
      tags:
        - Social
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                followingId:
                  type: string
                  format: uuid
              required:
                - followingId
      responses:
        '201':
          description: Follow request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
        '400':
          description: Invalid follow request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Already following
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Unfollow user
      description: Unfollow a user
      tags:
        - Social
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                followingId:
                  type: string
                  format: uuid
              required:
                - followingId
      responses:
        '204':
          description: Unfollowed
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Follow relationship not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /follow/requests:
    get:
      summary: Get follow requests
      description: Get pending follow requests for current user
      tags:
        - Social
      responses:
        '200':
          description: List of follow requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Follow'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update follow request
      description: Accept or reject a follow request
      tags:
        - Social
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                followId:
                  type: string
                  format: uuid
                status:
                  type: string
                  enum: [accepted, rejected]
              required:
                - followId
                - status
      responses:
        '200':
          description: Follow request updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Follow request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/following:
    get:
      summary: Get following
      description: Get users that a user is following
      tags:
        - Social
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of followed users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/followers:
    get:
      summary: Get followers
      description: Get users following a user
      tags:
        - Social
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of followers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Groups
  /groups:
    post:
      summary: Create group
      description: Create a new group
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                privacy:
                  type: string
                  enum: [public, private, hidden]
                  default: public
                coverImage:
                  type: string
                  format: uri
                rules:
                  type: array
                  items:
                    type: string
                metadata:
                  type: object
              required:
                - name
                - privacy
      responses:
        '201':
          description: Group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid group data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Get groups
      description: Get groups with filtering
      tags:
        - Groups
      parameters:
        - in: query
          name: privacy
          schema:
            type: string
            enum: [public, private, hidden]
          description: Filter by privacy level
        - in: query
          name: query
          schema:
            type: string
          description: Search query
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Group'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{id}:
    get:
      summary: Get group
      description: Get a group by ID
      tags:
        - Groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Group ID
      responses:
        '200':
          description: Group details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update group
      description: Update a group
      tags:
        - Groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Group ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                privacy:
                  type: string
                  enum: [public, private, hidden]
                coverImage:
                  type: string
                  format: uri
                rules:
                  type: array
                  items:
                    type: string
                metadata:
                  type: object
      responses:
        '200':
          description: Group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid group data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete group
      description: Delete a group
      tags:
        - Groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Group ID
      responses:
        '204':
          description: Group deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'                required:
                  - userId
                  - status
                  - lastActiveAt
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /presence/users:
    post:
      summary: Get multiple users' presence
      description: Get presence information for multiple users
      tags:
        - Presence
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - userIds
      responses:
        '200':
          description: Users presence information
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    userId:
                      type: string
                      format: uuid
                    status:
                      type: string
                      enum: [online, away, busy, offline]
                    lastActiveAt:
                      type: string
                      format: date-time
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /presence/context/{contextId}:
    get:
      summary: Get users in context
      description: Get all users present in a specific context
      tags:
        - Presence
      parameters:
        - in: path
          name: contextId
          required: true
          schema:
            type: string
          description: Context ID
      responses:
        '200':
          description: Users in context
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: string
                      format: uuid
                    status:
                      type: string
                      enum: [online, away, busy, offline]
                    lastActiveAt:
                      type: string
                      format: date-time
                    metadata:
                      type: object
                  required:
                    - userId
                    - status
                    - lastActiveAt
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /presence/join/{contextId}:
    post:
      summary: Join context
      description: Track user joining a context
      tags:
        - Presence
      parameters:
        - in: path
          name: contextId
          required: true
          schema:
            type: string
          description: Context ID
      responses:
        '204':
          description: Joined context
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /presence/leave/{contextId}:
    post:
      summary: Leave context
      description: Track user leaving a context
      tags:
        - Presence
      parameters:
        - in: path
          name: contextId
          required: true
          schema:
            type: string
          description: Context ID
      responses:
        '204':
          description: Left context
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /presence/activity:
    post:
      summary: Track activity
      description: Track user activity
      tags:
        - Presence
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [typing, viewing, reacting, editing, commenting, uploading]
                targetId:
                  type: string
                context:
                  type: string
                metadata:
                  type: object
              required:
                - type
      responses:
        '204':
          description: Activity tracked
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Social endpoints
  /posts:
    post:
      summary: Create post
      description: Create a new post
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                title:
                  type: string
                mediaIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                visibility:
                  type: string
                  enum: [public, private, friends]
                  default: public
                tags:
                  type: array
                  items:
                    type: string
                metadata:
                  type: object
              required:
                - content
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid post data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Get posts
      description: Get posts with filtering
      tags:
        - Posts
      parameters:
        - in: query
          name: userId
          schema:
            type: string
            format: uuid
          description: Filter by user ID
        - in: query
          name: visibility
          schema:
            type: string
            enum: [public, private, friends]
          description: Filter by visibility
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          description: Filter posts from this date
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          description: Filter posts until this date
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
          description: Filter by tags
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{id}:
    get:
      summary: Get post
      description: Get a post by ID
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Post ID
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update post
      description: Update a post
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Post ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                title:
                  type: string
                mediaIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                visibility:
                  type: string
                  enum: [public, private, friends]
                tags:
                  type: array
                  items:
                    type: string
                metadata:
                  type: object
      responses:
        '200':
          description: Post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid post data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete post
      description: Delete a post
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Post ID
      responses:
        '204':
          description: Post deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{id}/comments:
    post:
      summary: Add comment
      description: Add a comment to a post
      tags:
        - Comments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Post ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                parentId:
                  type: string
                  format: uuid
              required:
                - content
      responses:
        '201':
          description: Comment added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Get comments
      description: Get comments for a post
      tags:
        - Comments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Post ID
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/{id}:
    get:
      summary: Get comment
      description: Get a comment by ID
      tags:
        - Comments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Comment ID
      responses:
        '200':
          description: Comment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update comment
      description: Update a comment
      tags:
        - Comments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Comment ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        '200':
          description: Comment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete comment
      description: Delete a comment
      tags:
        - Comments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Comment ID
      responses:
        '204':
          description: Comment deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /conversations/{id}/messages:
    post:
      summary: Send message
      description: Send a message in a conversation
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Conversation ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                type:
                  type: string
                  enum: [text, media, system]
                  default: text
                replyToId:
                  type: string
                  format: uuid
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: [image, video, audio, file, link]
                      url:
                        type: string
                        format: uri
                      name:
                        type: string
                      size:
                        type: integer
                      metadata:
                        type: object
                metadata:
                  type: object
              required:
                - content
      responses:
        '201':
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied (e.g., read-only conversation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Get messages
      description: Get messages in a conversation
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Conversation ID
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          description: Filter messages from this date
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          description: Filter messages until this date
        - in: query
          name: type
          schema:
            type: string
            enum: [text, media, system]
          description: Filter by message type
        - in: query
          name: includeDeleted
          schema:
            type: boolean
            default: false
          description: Include deleted messages
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages/{id}:
    get:
      summary: Get message
      description: Get a message by ID
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Message ID
      responses:
        '200':
          description: Message details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Message not found or deleted for user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update message
      description: Update a message
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Message ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                metadata:
                  type: object
              required:
                - content
      responses:
        '200':
          description: Message updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid message content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete message
      description: Delete a message for the current user
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Message ID
      responses:
        '204':
          description: Message deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages/{id}/all:
    delete:
      summary: Delete message for all
      description: Delete a message for all users (admin only)
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Message ID
      responses:
        '204':
          description: Message deleted for all
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages/{id}/reaction:
    post:
      summary: Add reaction
      description: Add a reaction to a message
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Message ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emoji:
                  type: string
              required:
                - emoji
      responses:
        '204':
          description: Reaction added
        '400':
          description: Invalid emoji
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Remove reaction
      description: Remove a reaction from a message
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Message ID
        - in: query
          name: emoji
          required: true
          schema:
            type: string
          description: Emoji to remove
      responses:
        '204':
          description: Reaction removed
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages/{id}/read:
    post:
      summary: Mark as read
      description: Mark a message as read
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Message ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                clientInfo:
                  type: string
      responses:
        '204':
          description: Message marked as read
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages/read/batch:
    post:
      summary: Mark multiple as read
      description: Mark multiple messages as read
      tags:
        - Messaging
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                clientInfo:
                  type: string
              required:
                - messageIds
      responses:
        '204':
          description: Messages marked as read
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /conversations/{id}/read:
    post:
      summary: Mark conversation as read
      description: Mark all messages in a conversation as read
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Conversation ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                clientInfo:
                  type: string
      responses:
        '204':
          description: All messages marked as read
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages/{id}/edit-history:
    get:
      summary: Get edit history
      description: Get the edit history of a message
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Message ID
      responses:
        '200':
          description: Edit history
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
                    content:
                      type: string
                    editedBy:
                      type: string
                      format: uuid
                  required:
                    - timestamp
                    - content
                    - editedBy
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages/{id}/delivery-status:
    get:
      summary: Get delivery status
      description: Get the delivery status of a message
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Message ID
      responses:
        '200':
          description: Delivery status
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    status:
                      type: string
                      enum: [sending, sent, delivered, read, failed]
                    deliveredAt:
                      type: string
                      format: date-time
                    readAt:
                      type: string
                      format: date-time
                    clientInfo:
                      type: string
                  required:
                    - status
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages/search:
    get:
      summary: Search messages
      description: Search for messages across conversations
      tags:
        - Messaging
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          description: Search query
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          description: Filter messages from this date
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          description: Filter messages until this date
        - in: query
          name: type
          schema:
            type: string
            enum: [text, media, system]
          description: Filter by message type
        - in: query
          name: includeDeleted
          schema:
            type: boolean
            default: false
          description: Include deleted messages
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Message'
        '400':
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User presence
  /presence:
    post:
      summary: Update presence
      description: Update user's presence status
      tags:
        - Presence
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [online, away, busy, offline]
                metadata:
                  type: object
              required:
                - status
      responses:
        '204':
          description: Presence updated
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /presence/{userId}:
    get:
      summary: Get user presence
      description: Get a user's presence information
      tags:
        - Presence
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User presence
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [online, away, busy, offline]
                  lastActiveAt:
                    type: string
                    format: date-time
                  activeContexts:
                    type: array
                    items:
                      type: string
                  lastActivity:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: [typing, viewing, reacting, editing, commenting, uploading]
                      targetId:
                        type: string
                      context:
                        type: string
                      timestamp:
                        type: string
                        format: date-time
                      metadata:
                        type: object
                  metadata:
                    type: object
                openapi: 3.0.3
info:
  title: Application API
  description: API for social media and content management application
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: /api/v1
    description: Main API server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # User & Auth related schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        displayName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        profileImage:
          type: string
          format: uri
        bannerImage:
          type: string
          format: uri
        role:
          type: string
          enum: [user, admin, moderator]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time
      required:
        - id
        - username
        - email
        - role
        - isActive
    
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        displayName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        profileImage:
          type: string
          format: uri
        bannerImage:
          type: string
          format: uri
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - username
    
    UserPreferences:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        notifications:
          type: object
          properties:
            emailNotifications:
              type: boolean
            pushNotifications:
              type: boolean
            mentionNotifications:
              type: boolean
            commentNotifications:
              type: boolean
            followNotifications:
              type: boolean
            messageNotifications:
              type: boolean
            emailDigestFrequency:
              type: string
              enum: [never, daily, weekly, monthly]
            notificationSound:
              type: boolean
            desktopNotifications:
              type: boolean
        privacy:
          type: object
          properties:
            profileVisibility:
              type: string
              enum: [public, private, friends]
            showOnlineStatus:
              type: boolean
            allowMessagesFrom:
              type: string
              enum: [everyone, friends, none]
            showActivityStatus:
              type: boolean
            showLastSeen:
              type: boolean
            allowTagging:
              type: boolean
            allowFriendRequests:
              type: boolean
        theme:
          type: object
          properties:
            theme:
              type: string
              enum: [light, dark, system]
            fontSize:
              type: string
              enum: [small, medium, large]
            reducedMotion:
              type: boolean
            highContrast:
              type: boolean
        accessibility:
          type: object
          properties:
            screenReader:
              type: boolean
            keyboardNavigation:
              type: boolean
            colorBlindMode:
              type: string
              enum: [none, protanopia, deuteranopia, tritanopia]
            textToSpeech:
              type: boolean
            captionsEnabled:
              type: boolean
        language:
          type: string
        timezone:
          type: string
        updatedAt:
          type: string
          format: date-time
      required:
        - userId
        - updatedAt
    
    AuthResult:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
        refreshToken:
          type: string
        requiresMFA:
          type: boolean
        sessionId:
          type: string
        tempToken:
          type: string
      required:
        - user
        - token
        - refreshToken
    
    RegisterDTO:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        firstName:
          type: string
        lastName:
          type: string
      required:
        - username
        - email
        - password
    
    LoginDTO:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        mfaToken:
          type: string
      required:
        - email
        - password
    
    MFASetupDTO:
      type: object
      properties:
        secret:
          type: string
        qrCode:
          type: string
      required:
        - secret
        - qrCode
    
    PasswordResetRequestDTO:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    
    PasswordResetConfirmDTO:
      type: object
      properties:
        token:
          type: string
        newPassword:
          type: string
          minLength: 8
      required:
        - token
        - newPassword
    
    EmailVerificationDTO:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    
    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        isSystem:
          type: boolean
        inheritsFrom:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
    
    Permission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
    
    SessionInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        deviceInfo:
          type: object
          properties:
            ip:
              type: string
            userAgent:
              type: string
            deviceId:
              type: string
        createdAt:
          type: string
          format: date-time
        lastActiveAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - createdAt
        - lastActiveAt
    
    # Media related schemas
    Media:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        filename:
          type: string
        originalFilename:
          type: string
        mimeType:
          type: string
        size:
          type: integer
        path:
          type: string
        status:
          type: string
          enum: [processing, completed, failed]
        type:
          type: string
          enum: [image, video, audio]
        visibility:
          type: string
          enum: [public, private, unlisted]
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        variants:
          type: array
          items:
            type: string
        metadata:
          type: object
        location:
          type: object
          properties:
            latitude:
              type: number
              format: double
            longitude:
              type: number
              format: double
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - filename
        - mimeType
        - size
        - path
        - type
        - visibility
        - createdAt
    
    MediaCollection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        privacy:
          type: string
          enum: [public, private, shared]
        coverMediaId:
          type: string
          format: uuid
        type:
          type: string
          enum: [gallery, album, portfolio]
        mediaIds:
          type: array
          items:
            type: string
            format: uuid
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - title
        - privacy
        - type
        - createdAt
    
    MediaProcessingResult:
      type: object
      properties:
        mediaId:
          type: string
          format: uuid
        status:
          type: string
          enum: [processing, completed, failed]
        outputPath:
          type: string
        variants:
          type: array
          items:
            type: string
        error:
          type: string
      required:
        - mediaId
        - status
    
    # Messaging related schemas
    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        type:
          type: string
          enum: [direct, group]
        participantIds:
          type: array
          items:
            type: string
            format: uuid
        participantDetails:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
                format: uuid
              role:
                type: string
                enum: [admin, member]
              joinedAt:
                type: string
                format: date-time
        creatorId:
          type: string
          format: uuid
        lastMessageId:
          type: string
          format: uuid
        lastMessageSentAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, archived, deleted]
        isEncrypted:
          type: boolean
        isReadOnly:
          type: boolean
        maxParticipants:
          type: integer
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - type
        - participantIds
        - creatorId
        - status
        - createdAt
    
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        conversationId:
          type: string
          format: uuid
        senderId:
          type: string
          format: uuid
        content:
          type: string
        type:
          type: string
          enum: [text, media, system]
        status:
          type: string
          enum: [sending, sent, delivered, read, failed]
        replyToId:
          type: string
          format: uuid
        attachments:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              type:
                type: string
                enum: [image, video, audio, file, link]
              url:
                type: string
                format: uri
              thumbnailUrl:
                type: string
                format: uri
              name:
                type: string
              size:
                type: integer
              metadata:
                type: object
        metadata:
          type: object
        readBy:
          type: array
          items:
            type: string
            format: uuid
        isEdited:
          type: boolean
        editedAt:
          type: string
          format: date-time
        deletedForUserIds:
          type: array
          items:
            type: string
            format: uuid
        sentAt:
          type: string
          format: date-time
      required:
        - id
        - conversationId
        - senderId
        - content
        - type
        - status
        - sentAt
    
    # Social related schemas
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        content:
          type: string
        title:
          type: string
        mediaIds:
          type: array
          items:
            type: string
            format: uuid
        visibility:
          type: string
          enum: [public, private, friends]
        likesCount:
          type: integer
        commentsCount:
          type: integer
        sharesCount:
          type: integer
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - content
        - visibility
        - createdAt
    
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        postId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        content:
          type: string
        parentId:
          type: string
          format: uuid
        likesCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - postId
        - userId
        - content
        - createdAt
    
    Like:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        entityId:
          type: string
          format: uuid
        entityType:
          type: string
          enum: [post, comment, media]
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - entityId
        - entityType
        - createdAt
    
    Follow:
      type: object
      properties:
        id:
          type: string
          format: uuid
        followerId:
          type: string
          format: uuid
        followingId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, accepted, rejected, blocked]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - followerId
        - followingId
        - status
        - createdAt
    
    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        privacy:
          type: string
          enum: [public, private, hidden]
        creatorId:
          type: string
          format: uuid
        adminIds:
          type: array
          items:
            type: string
            format: uuid
        memberCount:
          type: integer
        coverImage:
          type: string
          format: uri
        rules:
          type: array
          items:
            type: string
        metadata:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - privacy
        - creatorId
        - createdAt
    
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          type: string
          enum: [post:like, post:comment, user:follow, message:new, media:processed, chat:room:added]
        actorId:
          type: string
          format: uuid
        metadata:
          type: object
          properties:
            entityId:
              type: string
              format: uuid
            entityType:
              type: string
            content:
              type: string
        read:
          type: boolean
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - type
        - read
        - createdAt
    
    # Analytics and activity related schemas
    ActivityLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          type: string
        metadata:
          type: object
        ipAddress:
          type: string
        userAgent:
          type: string
        targetId:
          type: string
        targetType:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - type
        - createdAt
    
    # Common schemas
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
      required:
        - code
        - message
    
    ValidationError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
            required:
              - field
              - message
      required:
        - code
        - message
        - errors
    
    PaginatedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        totalPages:
          type: integer
      required:
        - items
        - total
        - page
        - limit
        - totalPages
    
    GeoLocation:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        countryCode:
          type: string
        country:
          type: string
        regionCode:
          type: string
        region:
          type: string
        city:
          type: string
        postalCode:
          type: string
        timezone:
          type: string
        accuracy:
          type: number
      required:
        - latitude
        - longitude
        - countryCode
        - country

security:
  - bearerAuth: []

paths:
  # Auth endpoints
  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDTO'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResult'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Media Collection endpoints
  /collections:
    post:
      summary: Create collection
      description: Create a new media collection
      tags:
        - Media Collections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                privacy:
                  type: string
                  enum: [public, private, shared]
                coverMediaId:
                  type: string
                  format: uuid
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Collection updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaCollection'
        '400':
          description: Invalid collection data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete collection
      description: Delete a collection
      tags:
        - Media Collections
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Collection ID
      responses:
        '204':
          description: Collection deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /collections/{id}/media:
    post:
      summary: Add media to collection
      description: Add a media item to a collection
      tags:
        - Media Collections
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Collection ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mediaId:
                  type: string
                  format: uuid
              required:
                - mediaId
      responses:
        '204':
          description: Media added to collection
        '400':
          description: Invalid media ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Collection or media not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Remove media from collection
      description: Remove a media item from a collection
      tags:
        - Media Collections
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Collection ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mediaId:
                  type: string
                  format: uuid
              required:
                - mediaId
      responses:
        '204':
          description: Media removed from collection
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Collection or media not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /collections/{id}/share:
    post:
      summary: Share collection
      description: Share a collection with other users
      tags:
        - Media Collections
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Collection ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - userIds
      responses:
        '204':
          description: Collection shared
        '400':
          description: Invalid user IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Messaging endpoints
  /conversations:
    post:
      summary: Create conversation
      description: Create a new conversation
      tags:
        - Messaging
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                participantIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                type:
                  type: string
                  enum: [direct, group]
                isEncrypted:
                  type: boolean
                  default: false
                metadata:
                  type: object
              required:
                - participantIds
                - type
      responses:
        '201':
          description: Conversation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          description: Invalid conversation data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get conversations
      description: Get conversations for the current user
      tags:
        - Messaging
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [active, archived, deleted]
          description: Filter by status
        - in: query
          name: excludeArchived
          schema:
            type: boolean
          description: Exclude archived conversations
        - in: query
          name: type
          schema:
            type: string
            enum: [direct, group]
          description: Filter by type
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Conversation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /conversations/{id}:
    get:
      summary: Get conversation
      description: Get a conversation by ID
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Conversation ID
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update conversation
      description: Update a conversation
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Conversation ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                status:
                  type: string
                  enum: [active, archived, deleted]
                isReadOnly:
                  type: boolean
                metadata:
                  type: object
      responses:
        '200':
          description: Conversation updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /conversations/{id}/participants:
    post:
      summary: Add participants
      description: Add participants to a group conversation
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Conversation ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                participants:
                  type: array
                  items:
                    type: object
                    properties:
                      userId:
                        type: string
                        format: uuid
                      role:
                        type: string
                        enum: [admin, member]
                    required:
                      - userId
              required:
                - participants
      responses:
        '204':
          description: Participants added
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Remove participants
      description: Remove participants from a group conversation
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Conversation ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                participantIds:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - participantIds
      responses:
        '204':
          description: Participants removed
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /conversations/{id}/leave:
    post:
      summary: Leave conversation
      description: Leave a conversation
      tags:
        - Messaging
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Conversation ID
      responses:
        '204':
          description: Left conversation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Conversation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              required:
                - name
                - privacy
      responses:
        '201':
          description: Collection created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaCollection'
        '400':
          description: Invalid collection data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Get user collections
      description: Get collections for a user
      tags:
        - Media Collections
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
        - in: query
          name: privacy
          schema:
            type: string
            enum: [public, private, shared]
          description: Filter by privacy level
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of collections
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/MediaCollection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /collections/{id}:
    get:
      summary: Get collection
      description: Get a collection by ID
      tags:
        - Media Collections
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Collection ID
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaCollection'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update collection
      description: Update a collection
      tags:
        - Media Collections
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Collection ID
      requestBody:
        required: true
        content:
          

  /auth/login:
    post:
      summary: User login
      description: Authenticate a user and get tokens
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDTO'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResult'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get a new access token using a refresh token
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                required:
                  - token
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify-email:
    post:
      summary: Verify email address
      description: Verify user's email with token
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerificationDTO'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/request-password-reset:
    post:
      summary: Request password reset
      description: Send password reset link to email
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequestDTO'
      responses:
        '204':
          description: Password reset email sent
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/reset-password:
    post:
      summary: Reset password
      description: Reset password using token from email
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmDTO'
      responses:
        '204':
          description: Password reset successful
        '400':
          description: Invalid token or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/mfa/setup:
    post:
      summary: Set up MFA
      description: Generate MFA secret and QR code
      tags:
        - Authentication
      responses:
        '200':
          description: MFA setup information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFASetupDTO'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/mfa/verify:
    post:
      summary: Verify and enable MFA
      description: Verify MFA token and enable MFA for the user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
      responses:
        '200':
          description: MFA verified and enabled
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/mfa/disable:
    post:
      summary: Disable MFA
      description: Verify MFA token and disable MFA for the user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
      responses:
        '200':
          description: MFA disabled
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/sessions:
    get:
      summary: Get user's active sessions
      description: Get all active sessions for the current user
      tags:
        - Authentication
      responses:
        '200':
          description: List of active sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SessionInfo'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/sessions/{sessionId}:
    delete:
      summary: Terminate a session
      description: Terminate a specific session
      tags:
        - Authentication
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
            format: uuid
          description: Session ID to terminate
      responses:
        '204':
          description: Session terminated
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/sessions/others:
    delete:
      summary: Terminate all other sessions
      description: Terminate all sessions except the current one
      tags:
        - Authentication
      responses:
        '204':
          description: Other sessions terminated
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User endpoints
  /users:
    get:
      summary: Get users
      description: Get a list of users with filtering and pagination
      tags:
        - Users
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Search query
        - in: query
          name: role
          schema:
            type: string
          description: Filter by role
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive, all]
          description: Filter by status
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [username, createdAt, lastLogin]
          description: Sort field
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
          description: Sort direction
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Items per page
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      summary: Get user by ID
      description: Get a user's details by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update user
      description: Update a user's details
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                profileImage:
                  type: string
                  format: uri
                bannerImage:
                  type: string
                  format: uri
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete user
      description: Delete a user account
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '204':
          description: User deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/role:
    put:
      summary: Update user role
      description: Update a user's role
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [user, admin, moderator]
              required:
                - role
      responses:
        '200':
          description: User role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/password:
    put:
      summary: Update password
      description: Update user's password
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
                  minLength: 8
              required:
                - currentPassword
                - newPassword
      responses:
        '204':
          description: Password updated
        '400':
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{id}/preferences:
    get:
      summary: Get user preferences
      description: Get user preferences and settings
      tags:
        - User Preferences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update user preferences
      description: Update user preferences and settings
      tags:
        - User Preferences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferences'
      responses:
        '200':
          description: User preferences updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          description: Invalid preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/preferences/notifications:
    put:
      summary: Update notification preferences
      description: Update user notification preferences
      tags:
        - User Preferences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailNotifications:
                  type: boolean
                pushNotifications:
                  type: boolean
                mentionNotifications:
                  type: boolean
                commentNotifications:
                  type: boolean
                followNotifications:
                  type: boolean
                messageNotifications:
                  type: boolean
                emailDigestFrequency:
                  type: string
                  enum: [never, daily, weekly, monthly]
                notificationSound:
                  type: boolean
                desktopNotifications:
                  type: boolean
      responses:
        '200':
          description: Notification preferences updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          description: Invalid preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/preferences/privacy:
    put:
      summary: Update privacy preferences
      description: Update user privacy preferences
      tags:
        - User Preferences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                profileVisibility:
                  type: string
                  enum: [public, private, friends]
                showOnlineStatus:
                  type: boolean
                allowMessagesFrom:
                  type: string
                  enum: [everyone, friends, none]
                showActivityStatus:
                  type: boolean
                showLastSeen:
                  type: boolean
                allowTagging:
                  type: boolean
                allowFriendRequests:
                  type: boolean
      responses:
        '200':
          description: Privacy preferences updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '400':
          description: Invalid preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/preferences/reset:
    post:
      summary: Reset preferences
      description: Reset user preferences to default values
      tags:
        - User Preferences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: Preferences reset to defaults
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/profile:
    get:
      summary: Get user profile
      description: Get a user's public profile
      tags:
        - Profiles
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update profile
      description: Update a user's profile information
      tags:
        - Profiles
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                profileImage:
                  type: string
                  format: uri
                bannerImage:
                  type: string
                  format: uri
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/profile/image:
    put:
      summary: Update profile image
      description: Update a user's profile image
      tags:
        - Profiles
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageUrl:
                  type: string
                  format: uri
              required:
                - imageUrl
      responses:
        '200':
          description: Profile image updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid image URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/profile/completion:
    get:
      summary: Get profile completion status
      description: Get a user's profile completion status with recommendations
      tags:
        - Profiles
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: Profile completion status
          content:
            application/json:
              schema:
                type: object
                properties:
                  isComplete:
                    type: boolean
                  missingFields:
                    type: array
                    items:
                      type: string
                  completionPercentage:
                    type: number
                    format: float
                  recommendations:
                    type: array
                    items:
                      type: string
                  fieldStatus:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        complete:
                          type: boolean
                        recommendation:
                          type: string
                required:
                  - isComplete
                  - missingFields
                  - completionPercentage
                  - recommendations
                  - fieldStatus
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/search:
    get:
      summary: Search profiles
      description: Search user profiles by name or username
      tags:
        - Profiles
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          description: Search query
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Items per page
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Offset for pagination
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [relevance, name, recent]
            default: relevance
          description: Sort field
        - in: query
          name: includeInactive
          schema:
            type: boolean
            default: false
          description: Include inactive users
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  profiles:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserProfile'
                  total:
                    type: integer
                  hasMore:
                    type: boolean
                required:
                  - profiles
                  - total
                  - hasMore
        '400':
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Media endpoints
  /media:
    post:
      summary: Upload media
      description: Upload a new media file
      tags:
        - Media
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                title:
                  type: string
                description:
                  type: string
                type:
                  type: string
                  enum: [image, video, audio]
                visibility:
                  type: string
                  enum: [public, private, unlisted]
                  default: public
                tags:
                  type: array
                  items:
                    type: string
                location:
                  type: object
                  properties:
                    latitude:
                      type: number
                      format: double
                    longitude:
                      type: number
                      format: double
              required:
                - file
                - type
      responses:
        '201':
          description: Media uploaded and processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          description: Invalid file or metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Get media by user
      description: Get media items filtered by user
      tags:
        - Media
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
        - in: query
          name: type
          schema:
            type: string
            enum: [image, video, audio]
          description: Filter by media type
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: List of media items
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Media'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /media/{id}:
    get:
      summary: Get media item
      description: Get a media item by ID
      tags:
        - Media
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Media ID
      responses:
        '200':
          description: Media item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Media not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update media item
      description: Update a media item's metadata
      tags:
        - Media
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Media ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                visibility:
                  type: string
                  enum: [public, private, unlisted]
                tags:
                  type: array
                  items:
                    type: string
                location:
                  type: object
                  properties:
                    latitude:
                      type: number
                      format: double
                    longitude:
                      type: number
                      format: double
      responses:
        '200':
          description: Media updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          description: Invalid metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Media not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete media item
      description: Delete a media item
      tags:
        - Media
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Media ID
      responses:
        '204':
          description: Media deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Media not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /media/{id}/process:
    post:
      summary: Process media
      description: Process media with custom options
      tags:
        - Media
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Media ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resize:
                  type: object
                  properties:
                    width:
                      type: integer
                    height:
                      type: integer
                    fit:
                      type: string
                      enum: [cover, contain, inside, outside]
                format:
                  type: string
                  enum: [jpeg, png, webp, gif]
                quality:
                  type: integer
                  minimum: 1
                  maximum: 100
      responses:
        '202':
          description: Processing started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaProcessingResult'
        '400':
          description: Invalid processing options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Media not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /media/{id}/status:
    get:
      summary: Get processing status
      description: Get the processing status of a media item
      tags:
        - Media
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Media ID
      responses:
        '200':
          description: Processing status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaProcessingResult'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Media not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /media/{id}/tags:
    get:
      summary: Get media tags
      description: Get tags for a media item
      tags:
        - Media Tags
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Media ID
      responses:
        '200':
          description: Media tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Media not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Add tags to media
      description: Add tags to a media item
      tags:
        - Media Tags
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Media ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
              required:
                - tags
      responses:
        '204':
          description: Tags added
        '400':
          description: Invalid tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Media not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Remove tags from media
      description: Remove tags from a media item
      tags:
        - Media Tags
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Media ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
              required:
                - tags
      responses:
        '204':
          description: Tags removed
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Media not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tags/trending:
    get:
      summary: Get trending tags
      description: Get trending tags across the platform
      tags:
        - Media Tags
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of tags to return
      responses:
        '200':
          description: Trending tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /media/search/tags:
    get:
      summary: Search media by tags
      description: Search for media items by tags
      tags:
        - Media Tags
      parameters:
        - in: query
          name: tags
          required: true
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
          description: Tags to search for
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Offset for pagination
      responses:
        '200':
          description: Media search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Media'
        '400':
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'