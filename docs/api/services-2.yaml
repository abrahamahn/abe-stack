/search/suggestions:
    get:
      summary: Get search suggestions
      description: Get search suggestions based on prefix
      tags:
        - Search
      parameters:
        - name: prefix
          in: query
          required: true
          description: Text prefix to generate suggestions for
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of suggestions
          schema:
            type: integer
            default: 5
            minimum: 1
            maximum: 20
      responses:
        '200':
          description: Search suggestions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /search/popular:
    get:
      summary: Get popular searches
      description: Get most popular search queries
      tags:
        - Search
      parameters:
        - name: limit
          in: query
          description: Maximum number of popular searches
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
      responses:
        '200':
          description: Popular searches
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  # Recommendations endpoints
  /recommendations/users:
    get:
      summary: Get recommended users
      description: Get personalized user recommendations to follow
      tags:
        - Recommendations
      parameters:
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
        - name: includeFollowersOf
          in: query
          description: Include followers of these users
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: includeFollowingOf
          in: query
          description: Include users followed by these users
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: includeInteractedWith
          in: query
          description: Include users the current user has interacted with
          schema:
            type: boolean
            default: true
        - name: includeCommonInterests
          in: query
          description: Include users with common interests
          schema:
            type: boolean
            default: true
        - name: includePopular
          in: query
          description: Include popular users
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Recommended users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /recommendations/groups:
    get:
      summary: Get recommended groups
      description: Get personalized group recommendations
      tags:
        - Recommendations
      parameters:
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: Recommended groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /recommendations/content:
    get:
      summary: Get recommended content
      description: Get personalized content recommendations
      tags:
        - Recommendations
      parameters:
        - name: contentTypes
          in: query
          description: Types of content to recommend
          schema:
            type: array
            items:
              type: string
              enum: [post, media, user, group, hashtag]
        - name: excludeIds
          in: query
          description: Content IDs to exclude
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: includeTags
          in: query
          description: Only include content with these tags
          schema:
            type: array
            items:
              type: string
        - name: excludeTags
          in: query
          description: Exclude content with these tags
          schema:
            type: array
            items:
              type: string
        - name: maxAge
          in: query
          description: Maximum age in days
          schema:
            type: integer
            minimum: 1
        - name: onlyFollowing
          in: query
          description: Only content from users the current user follows
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: Recommended content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /trending:
    get:
      summary: Get trending content
      description: Get trending content across multiple types
      tags:
        - Recommendations
      parameters:
        - name: timeframe
          in: query
          description: Trending timeframe
          schema:
            type: string
            enum: [day, week, month]
            default: week
        - name: contentTypes
          in: query
          description: Types of content
          schema:
            type: array
            items:
              type: string
              enum: [post, media, user, group, hashtag]
        - name: location
          in: query
          description: Geographic location filter
          schema:
            type: object
            properties:
              lat:
                type: number
                format: float
              lng:
                type: number
                format: float
              radius:
                type: number
                format: float
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: Trending content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'

  # Moderation endpoints
  /moderation/report:
    post:
      summary: Report content
      description: Report inappropriate content
      tags:
        - Moderation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contentId:
                  type: string
                  format: uuid
                contentType:
                  type: string
                  enum: [POST, COMMENT, USER, MEDIA, MESSAGE]
                reason:
                  $ref: '#/components/schemas/ModerationReason'
                description:
                  type: string
              required:
                - contentId
                - contentType
                - reason
      responses:
        '201':
          description: Report submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /moderation/reports:
    get:
      summary: Get submitted reports
      description: Get reports submitted by the current user
      tags:
        - Moderation
      parameters:
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
        - name: status
          in: query
          description: Filter by report status
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ModerationStatus'
      responses:
        '200':
          description: List of reports
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /moderation/appeal:
    post:
      summary: Submit appeal
      description: Appeal a moderation action
      tags:
        - Moderation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actionId:
                  type: string
                  format: uuid
                reason:
                  type: string
                evidence:
                  type: string
              required:
                - actionId
                - reason
      responses:
        '201':
          description: Appeal submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [PENDING, APPROVED, REJECTED]
                  createdAt:
                    type: string
                    format: date-time
                required:
                  - id
                  - status
                  - createdAt
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

parameters:
  paginationPage:
    name: page
    in: query
    description: Page number
    schema:
      type: integer
      minimum: 1
      default: 1
  paginationLimit:
    name: limit
    in: query
    description: Number of items per page
    schema:
      type: integer
      minimum: 1
      maximum: 100
      default: 20

  /auth/refresh:
    post:
      summary: Refresh token
      description: Get a new access token using a refresh token
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
      responses:
        '200':
          description: Token refresh successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  expiresIn:
                    type: integer
                required:
                  - accessToken
                  - expiresIn
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      summary: User logout
      description: Invalidate the current session and tokens
      tags:
        - Auth
      responses:
        '204':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Media endpoints
  /media:
    post:
      summary: Upload media
      description: Upload media file (image, video, etc.)
      tags:
        - Media
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                type:
                  type: string
                  enum: [IMAGE, VIDEO, AUDIO, DOCUMENT]
                title:
                  type: string
                description:
                  type: string
              required:
                - file
                - type
      responses:
        '201':
          description: Media uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  url:
                    type: string
                    format: uri
                  type:
                    type: string
                  size:
                    type: integer
                  width:
                    type: integer
                  height:
                    type: integer
                  duration:
                    type: integer
                  format:
                    type: string
                required:
                  - id
                  - url
                  - type
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /media/{mediaId}:
    get:
      summary: Get media
      description: Get media details
      tags:
        - Media
      parameters:
        - name: mediaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Media details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  userId:
                    type: string
                    format: uuid
                  url:
                    type: string
                    format: uri
                  type:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  size:
                    type: integer
                  width:
                    type: integer
                  height:
                    type: integer
                  duration:
                    type: integer
                  format:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                required:
                  - id
                  - userId
                  - url
                  - type
                  - createdAt
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete media
      description: Delete a media file
      tags:
        - Media
      parameters:
        - name: mediaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Media deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Analytics endpoints
  /analytics/user/{userId}:
    get:
      summary: Get user analytics
      description: Get analytics for a user's activity and engagement
      tags:
        - Analytics
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: timeframe
          in: query
          description: Time period for analytics
          schema:
            type: string
            enum: [day, week, month, year, all]
            default: month
      responses:
        '200':
          description: User analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  postsCount:
                    type: integer
                  likesCount:
                    type: integer
                  commentsCount:
                    type: integer
                  followersCount:
                    type: integer
                  followingCount:
                    type: integer
                  viewsCount:
                    type: integer
                  engagementRate:
                    type: number
                    format: float
                  popularPosts:
                    type: array
                    items:
                      type: object
                  activityByDay:
                    type: object
                    additionalProperties:
                      type: integer
                required:
                  - postsCount
                  - likesCount
                  - commentsCount
                  - followersCount
                  - followingCount
                  - engagementRate
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /analytics/post/{postId}:
    get:
      summary: Get post analytics
      description: Get performance analytics for a specific post
      tags:
        - Analytics
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  viewsCount:
                    type: integer
                  likesCount:
                    type: integer
                  commentsCount:
                    type: integer
                  shareCount:
                    type: integer
                  bookmarkCount:
                    type: integer
                  engagementRate:
                    type: number
                    format: float
                  viewsByDay:
                    type: object
                    additionalProperties:
                      type: integer
                  demographicData:
                    type: object
                required:
                  - viewsCount
                  - likesCount
                  - commentsCount
                  - shareCount
                  - engagementRate
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /analytics/group/{groupId}:
    get:
      summary: Get group analytics
      description: Get analytics for a group
      tags:
        - Analytics
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: timeframe
          in: query
          description: Time period for analytics
          schema:
            type: string
            enum: [day, week, month, year, all]
            default: month
      responses:
        '200':
          description: Group analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  memberCount:
                    type: integer
                  activeMembers:
                    type: integer
                  memberGrowth:
                    type: number
                    format: float
                  postsPerDay:
                    type: number
                    format: float
                  engagementRate:
                    type: number
                    format: float
                  topContributors:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          format: uuid
                        contributions:
                          type: integer
                      required:
                        - userId
                        - contributions
                  membersByDay:
                    type: object
                    additionalProperties:
                      type: integer
                required:
                  - memberCount
                  - activeMembers
                  - memberGrowth
                  - postsPerDay
                  - engagementRate
                  - topContributors
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Session endpoints
  /sessions:
    get:
      summary: Get user sessions
      description: Get all active sessions for the current user
      tags:
        - Auth
      responses:
        '200':
          description: List of active sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    deviceInfo:
                      type: object
                      properties:
                        ip:
                          type: string
                        userAgent:
                          type: string
                        platform:
                          type: string
                        browser:
                          type: string
                    createdAt:
                      type: string
                      format: date-time
                    lastActiveAt:
                      type: string
                      format: date-time
                  required:
                    - id
                    - deviceInfo
                    - createdAt
                    - lastActiveAt
        '401':
          $ref: '#/components/responses/Unauthorized'

  /sessions/{sessionId}:
    delete:
      summary: Terminate session
      description: Terminate a specific session
      tags:
        - Auth
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Session terminated successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /sessions/all:
    delete:
      summary: Terminate all sessions
      description: Terminate all sessions except the current one
      tags:
        - Auth
      responses:
        '204':
          description: All other sessions terminated successfully
        '401':
          $ref: '#/components/responses/Unauthorized'openapi: 3.0.3
info:
  title: Social Platform API
  description: |
    API for a comprehensive social media platform with features including posts, comments, likes, follows, 
    groups, notifications, content moderation, and more. Built based on service layer architecture.
  version: 1.0.0
  contact:
    name: API Support
    email: support@socialplatform.com

servers:
  - url: https://api.socialplatform.com/v1
    description: Production server
  - url: https://staging-api.socialplatform.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Local development server

tags:
  - name: Auth
    description: Authentication and authorization endpoints
  - name: Users
    description: User account management
  - name: Posts
    description: Post creation, retrieval, and management
  - name: Comments
    description: Comment operations
  - name: Likes
    description: Like operations
  - name: Bookmarks
    description: Bookmark operations
  - name: Follows
    description: User follow relationships
  - name: Groups
    description: Group and community management
  - name: Notifications
    description: User notifications
  - name: Hashtags
    description: Hashtag operations
  - name: Search
    description: Search functionality
  - name: Feeds
    description: Content feeds
  - name: Recommendations
    description: Content and user recommendations
  - name: Moderation
    description: Content moderation

components:
  schemas:
    # User related schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        profileImage:
          type: string
          format: uri
        bio:
          type: string
        verified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        type:
          type: string
          enum: [STANDARD, VERIFIED, PREMIUM, RESTRICTED]
      required:
        - id
        - username
        - email
        - type

    UserType:
      type: string
      enum: [STANDARD, VERIFIED, PREMIUM, RESTRICTED]

    # Post related schemas
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        content:
          type: string
        type:
          $ref: '#/components/schemas/PostType'
        visibility:
          $ref: '#/components/schemas/PostVisibility'
        status:
          $ref: '#/components/schemas/PostStatus'
        location:
          $ref: '#/components/schemas/PostLocation'
        mediaIds:
          type: array
          items:
            type: string
            format: uuid
        metadata:
          $ref: '#/components/schemas/PostMetadata'
        parentId:
          type: string
          format: uuid
          nullable: true
        likeCount:
          type: integer
          minimum: 0
        commentCount:
          type: integer
          minimum: 0
        shareCount:
          type: integer
          minimum: 0
        viewCount:
          type: integer
          minimum: 0
        scheduledAt:
          type: string
          format: date-time
          nullable: true
        publishedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - type
        - visibility
        - status
        - createdAt

    PostType:
      type: string
      enum: [TEXT, IMAGE, VIDEO, LINK, POLL]

    PostVisibility:
      type: string
      enum: [PUBLIC, PRIVATE, FOLLOWERS, UNLISTED]

    PostStatus:
      type: string
      enum: [DRAFT, PUBLISHED, SCHEDULED, DELETED]

    PostLocation:
      type: object
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        name:
          type: string
      required:
        - latitude
        - longitude

    PostMetadata:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        mentions:
          type: array
          items:
            type: string
        pollOptions:
          type: array
          items:
            type: string
        pollResults:
          type: object
          additionalProperties:
            type: integer
        linkPreview:
          type: object
          properties:
            title:
              type: string
            description:
              type: string
            image:
              type: string
              format: uri
        embed:
          type: object
        isExplicit:
          type: boolean
        interactionCount:
          type: integer
        trendingScore:
          type: number
        reacted:
          type: boolean

    CreatePostRequest:
      type: object
      properties:
        content:
          type: string
        type:
          $ref: '#/components/schemas/PostType'
        visibility:
          $ref: '#/components/schemas/PostVisibility'
        location:
          $ref: '#/components/schemas/PostLocation'
        mediaIds:
          type: array
          items:
            type: string
            format: uuid
        metadata:
          $ref: '#/components/schemas/PostMetadata'
        scheduledAt:
          type: string
          format: date-time
        parentId:
          type: string
          format: uuid
      required:
        - content
        - type

    UpdatePostRequest:
      type: object
      properties:
        content:
          type: string
        type:
          $ref: '#/components/schemas/PostType'
        visibility:
          $ref: '#/components/schemas/PostVisibility'
        location:
          $ref: '#/components/schemas/PostLocation'
        mediaIds:
          type: array
          items:
            type: string
            format: uuid
        metadata:
          $ref: '#/components/schemas/PostMetadata'
        scheduledAt:
          type: string
          format: date-time

    # Comment related schemas
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        postId:
          type: string
          format: uuid
        content:
          type: string
        parentId:
          type: string
          format: uuid
          nullable: true
        likesCount:
          type: integer
          minimum: 0
        status:
          type: string
          enum: [PUBLISHED, DELETED, HIDDEN]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - postId
        - content
        - createdAt

    CreateCommentRequest:
      type: object
      properties:
        content:
          type: string
        parentId:
          type: string
          format: uuid
      required:
        - content

    CommentThread:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
        replies:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        totalReplies:
          type: integer
      required:
        - comment
        - replies
        - totalReplies

    # Like related schemas
    Like:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        targetId:
          type: string
          format: uuid
        targetType:
          type: string
          enum: [POST, COMMENT]
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - targetId
        - targetType
        - createdAt

    # Bookmark related schemas
    Bookmark:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        entityId:
          type: string
          format: uuid
        entityType:
          type: string
          enum: [POST, COMMENT, MEDIA]
        collectionId:
          type: string
          format: uuid
          nullable: true
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - entityId
        - entityType
        - createdAt

    # Follow related schemas
    Follow:
      type: object
      properties:
        id:
          type: string
          format: uuid
        followerId:
          type: string
          format: uuid
        followingId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - followerId
        - followingId
        - createdAt

    FollowStats:
      type: object
      properties:
        followersCount:
          type: integer
          minimum: 0
        followingCount:
          type: integer
          minimum: 0
        mutualFollowersCount:
          type: integer
          minimum: 0
        lastFollowedAt:
          type: string
          format: date-time
          nullable: true
        lastFollowerAt:
          type: string
          format: date-time
          nullable: true
      required:
        - followersCount
        - followingCount
        - mutualFollowersCount

    # Group related schemas
    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        imageUrl:
          type: string
          format: uri
          nullable: true
        bannerUrl:
          type: string
          format: uri
          nullable: true
        ownerId:
          type: string
          format: uuid
        visibility:
          type: string
          enum: [PUBLIC, PRIVATE]
        status:
          type: string
          enum: [ACTIVE, INACTIVE, ARCHIVED]
        memberCount:
          type: integer
          minimum: 0
        slug:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - ownerId
        - visibility
        - status
        - memberCount
        - createdAt

    GroupCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        imageUrl:
          type: string
          format: uri
        bannerUrl:
          type: string
          format: uri
        visibility:
          type: string
          enum: [PUBLIC, PRIVATE]
      required:
        - name

    GroupUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        imageUrl:
          type: string
          format: uri
        bannerUrl:
          type: string
          format: uri
        visibility:
          type: string
          enum: [PUBLIC, PRIVATE]
        status:
          type: string
          enum: [ACTIVE, INACTIVE, ARCHIVED]

    GroupMember:
      type: object
      properties:
        id:
          type: string
          format: uuid
        groupId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum: [member, admin]
        status:
          type: string
          enum: [PENDING, APPROVED, BANNED]
        notificationSettings:
          type: object
          properties:
            posts:
              type: boolean
            events:
              type: boolean
            announcements:
              type: boolean
        lastActivity:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - groupId
        - userId
        - role
        - status
        - createdAt

    # Notification related schemas
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [LIKE, COMMENT, FOLLOW, MENTION, MESSAGE, SYSTEM]
        userId:
          type: string
          format: uuid
        actorId:
          type: string
          format: uuid
          nullable: true
        entityId:
          type: string
          format: uuid
          nullable: true
        entityType:
          type: string
          enum: [POST, COMMENT, USER, GROUP, MESSAGE]
          nullable: true
        content:
          type: string
          nullable: true
        metadata:
          type: object
        read:
          type: boolean
        delivered:
          type: boolean
        disabled:
          type: boolean
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - type
        - userId
        - read
        - delivered
        - createdAt

    NotificationGroup:
      type: object
      properties:
        type:
          type: string
          enum: [LIKE, COMMENT, FOLLOW, MENTION, MESSAGE, SYSTEM]
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        count:
          type: integer
          minimum: 1
        latestTimestamp:
          type: string
          format: date-time
        actors:
          type: array
          items:
            type: string
            format: uuid
        preview:
          type: string
      required:
        - type
        - notifications
        - count
        - latestTimestamp
        - preview

    NotificationPreferences:
      type: object
      properties:
        likes:
          type: boolean
        comments:
          type: boolean
        follows:
          type: boolean
        mentions:
          type: boolean
        messages:
          type: boolean
        email:
          type: boolean
        push:
          type: boolean
        digestFrequency:
          type: string
          enum: [realtime, daily, weekly]
        quietHours:
          type: object
          properties:
            enabled:
              type: boolean
            start:
              type: string
              pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"  # HH:mm format
            end:
              type: string
              pattern: "^([0-1][0-9]|2[0-3]):[0-5][0-9]$"  # HH:mm format
            timezone:
              type: string
          required:
            - enabled
            - start
            - end
            - timezone
        channels:
          type: object
          properties:
            inApp:
              type: boolean
            email:
              type: boolean
            push:
              type: boolean
            sms:
              type: boolean
          required:
            - inApp
            - email
            - push
            - sms
      required:
        - likes
        - comments
        - follows
        - mentions
        - messages
        - digestFrequency
        - quietHours
        - channels

    # Hashtag related schemas
    Hashtag:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tag:
          type: string
        normalizedTag:
          type: string
        category:
          type: string
          enum: [GENERAL, TECH, ENTERTAINMENT, SPORTS, NEWS, LIFESTYLE, BUSINESS, HEALTH, EDUCATION, OTHER]
        usageCount:
          type: integer
          minimum: 0
        trendingScore:
          type: number
          nullable: true
        lastUsedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - tag
        - normalizedTag
        - category
        - usageCount
        - createdAt

    HashtagStats:
      type: object
      properties:
        usageCount:
          type: integer
          minimum: 0
        postsCount:
          type: integer
          minimum: 0
        uniqueUsers:
          type: integer
          minimum: 0
        category:
          type: string
          enum: [GENERAL, TECH, ENTERTAINMENT, SPORTS, NEWS, LIFESTYLE, BUSINESS, HEALTH, EDUCATION, OTHER]
        avgEngagement:
          type: number
        lastUsedAt:
          type: string
          format: date-time
      required:
        - usageCount
        - postsCount
        - uniqueUsers
        - category
        - avgEngagement
        - lastUsedAt

    TrendingHashtag:
      type: object
      properties:
        tag:
          type: string
        usageCount:
          type: integer
          minimum: 0
        postsCount:
          type: integer
          minimum: 0
        uniqueUsers:
          type: integer
          minimum: 0
        category:
          type: string
          enum: [GENERAL, TECH, ENTERTAINMENT, SPORTS, NEWS, LIFESTYLE, BUSINESS, HEALTH, EDUCATION, OTHER]
        avgEngagement:
          type: number
        momentum:
          type: number
        normalizedScore:
          type: number
        velocityScore:
          type: number
        peakUsageTime:
          type: string
      required:
        - tag
        - usageCount
        - momentum
        - normalizedScore

    # Feed related schemas
    FeedOptions:
      type: object
      properties:
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
        offset:
          type: integer
          minimum: 0
          default: 0
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        contentTypes:
          type: array
          items:
            type: string
        excludedUserIds:
          type: array
          items:
            type: string
            format: uuid
        excludedPostIds:
          type: array
          items:
            type: string
            format: uuid
        minEngagementScore:
          type: number
          minimum: 0
          maximum: 1

    FeedResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        hasMore:
          type: boolean
        nextOffset:
          type: integer
          minimum: 0
        totalEstimate:
          type: integer
          minimum: 0
      required:
        - posts
        - hasMore

    # Search related schemas
    SearchFilters:
      type: object
      properties:
        entityTypes:
          type: array
          items:
            type: string
            enum: [user, post, media, conversation, message, group, comment, hashtag]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        sortBy:
          type: string
          enum: [relevance, date, popularity]
          default: relevance
        userIds:
          type: array
          items:
            type: string
            format: uuid
        tags:
          type: array
          items:
            type: string
        location:
          type: object
          properties:
            lat:
              type: number
              format: float
            lng:
              type: number
              format: float
            radius:
              type: number
              format: float
              description: Search radius in kilometers
          required:
            - lat
            - lng
            - radius

    SearchResults:
      type: object
      properties:
        users:
          $ref: '#/components/schemas/PaginatedResult'
        posts:
          $ref: '#/components/schemas/PaginatedResult'
        media:
          $ref: '#/components/schemas/PaginatedResult'
        conversations:
          $ref: '#/components/schemas/PaginatedResult'
        messages:
          $ref: '#/components/schemas/PaginatedResult'
        groups:
          $ref: '#/components/schemas/PaginatedResult'
        comments:
          $ref: '#/components/schemas/PaginatedResult'
        hashtags:
          $ref: '#/components/schemas/PaginatedResult'
      required:
        - users
        - posts
        - groups
        - hashtags

    # Moderation related schemas
    ModerationStatus:
      type: string
      enum: [PENDING, APPROVED, REJECTED, FLAGGED, UNDER_REVIEW]

    ModerationReason:
      type: string
      enum: [HATE_SPEECH, HARASSMENT, VIOLENCE, SPAM, OFFENSIVE, INAPPROPRIATE, COPYRIGHT, PERSONAL_INFO, NUDITY, SELF_HARM, OTHER]

    ModerationDecision:
      type: string
      enum: [APPROVE, REJECT, ESCALATE, WARN, FLAG]

    Report:
      type: object
      properties:
        id:
          type: string
          format: uuid
        contentId:
          type: string
          format: uuid
        contentType:
          type: string
          enum: [POST, COMMENT, USER, MEDIA, MESSAGE]
        reporterId:
          type: string
          format: uuid
        reason:
          $ref: '#/components/schemas/ModerationReason'
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ModerationStatus'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        reviewedAt:
          type: string
          format: date-time
          nullable: true
        reviewerId:
          type: string
          format: uuid
          nullable: true
        reviewNote:
          type: string
          nullable: true
      required:
        - id
        - contentId
        - contentType
        - reporterId
        - reason
        - status
        - createdAt

    # Common schemas
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
      required:
        - code
        - message

    PaginatedResult:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        total:
          type: integer
          minimum: 0
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        totalPages:
          type: integer
          minimum: 0
      required:
        - items
        - total
        - page
        - limit
        - totalPages

    PaginationOptions:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          default: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
        sortBy:
          type: string
        sortOrder:
          type: string
          enum: [asc, desc]
          default: desc

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: Bad request - validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequests:
      description: Rate limit exceeded
      headers:
        Retry-After:
          schema:
            type: integer
          description: Time in seconds to wait before making the next request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - bearerAuth: []

paths:
  # User endpoints
  /users:
    get:
      summary: Get users
      description: Get a list of users with optional filters
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
        - name: query
          in: query
          description: Search query for username/name
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Create user
      description: Create a new user account
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                name:
                  type: string
              required:
                - username
                - email
                - password
      security: []
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      summary: Get user
      description: Get user details by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update user
      description: Update user details
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                bio:
                  type: string
                profileImage:
                  type: string
                  format: uri
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Post endpoints
  /posts:
    get:
      summary: Get posts
      description: Get a list of posts with optional filters
      tags:
        - Posts
      parameters:
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
        - name: userId
          in: query
          description: Filter posts by user ID
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          description: Filter posts by type
          schema:
            $ref: '#/components/schemas/PostType'
        - name: beforeDate
          in: query
          description: Filter posts published before date
          schema:
            type: string
            format: date-time
        - name: afterDate
          in: query
          description: Filter posts published after date
          schema:
            type: string
            format: date-time
        - name: includeReplies
          in: query
          description: Include replies in results
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  hasMore:
                    type: boolean
                  nextCursor:
                    type: string
                required:
                  - items
                  - hasMore
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Create post
      description: Create a new post
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /posts/{postId}:
    get:
      summary: Get post
      description: Get post by ID
      tags:
        - Posts
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update post
      description: Update an existing post
      tags:
        - Posts
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '200':
          description: Post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete post
      description: Delete an existing post
      tags:
        - Posts
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Post deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /posts/{postId}/comments:
    get:
      summary: Get post comments
      description: Get comments for a specific post
      tags:
        - Comments
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer
                required:
                  - items
                  - total
                  - page
                  - limit
                  - totalPages
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Create comment
      description: Create a new comment on a post
      tags:
        - Comments
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /comments/{commentId}:
    get:
      summary: Get comment
      description: Get a specific comment by ID
      tags:
        - Comments
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Comment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update comment
      description: Update an existing comment
      tags:
        - Comments
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        '200':
          description: Comment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete comment
      description: Delete an existing comment
      tags:
        - Comments
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Comment deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /comments/{commentId}/replies:
    get:
      summary: Get comment replies
      description: Get replies to a specific comment
      tags:
        - Comments
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: List of replies
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer
                required:
                  - items
                  - total
                  - page
                  - limit
                  - totalPages
        '404':
          $ref: '#/components/responses/NotFound'

  /comments/{commentId}/thread:
    get:
      summary: Get comment thread
      description: Get a comment with its replies as a thread
      tags:
        - Comments
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Comment thread
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentThread'
        '404':
          $ref: '#/components/responses/NotFound'

  # Like endpoints
  /posts/{postId}/like:
    post:
      summary: Like post
      description: Like a post
      tags:
        - Likes
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Post liked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    delete:
      summary: Unlike post
      description: Remove like from a post
      tags:
        - Likes
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Post unliked successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /comments/{commentId}/like:
    post:
      summary: Like comment
      description: Like a comment
      tags:
        - Likes
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Comment liked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    delete:
      summary: Unlike comment
      description: Remove like from a comment
      tags:
        - Likes
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Comment unliked successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /posts/{postId}/likes:
    get:
      summary: Get post likes
      description: Get users who liked a post
      tags:
        - Likes
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: List of likes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'
        '404':
          $ref: '#/components/responses/NotFound'

  # Bookmark endpoints
  /posts/{postId}/bookmark:
    post:
      summary: Bookmark post
      description: Bookmark a post
      tags:
        - Bookmarks
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Post bookmarked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Remove bookmark
      description: Remove bookmark from a post
      tags:
        - Bookmarks
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Bookmark removed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{userId}/bookmarks:
    get:
      summary: Get user bookmarks
      description: Get bookmarks for a user
      tags:
        - Bookmarks
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: List of bookmarks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Follow endpoints
  /users/{userId}/follow:
    post:
      summary: Follow user
      description: Follow a user
      tags:
        - Follows
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: User followed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    delete:
      summary: Unfollow user
      description: Unfollow a user
      tags:
        - Follows
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User unfollowed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{userId}/followers:
    get:
      summary: Get followers
      description: Get followers of a user
      tags:
        - Follows
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
        - name: mutualOnly
          in: query
          description: Return only mutual followers
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of followers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{userId}/following:
    get:
      summary: Get following
      description: Get users that a user is following
      tags:
        - Follows
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: List of followed users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{userId}/followstats:
    get:
      summary: Get follow statistics
      description: Get follow statistics for a user
      tags:
        - Follows
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Follow statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowStats'
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{userId1}/mutual/{userId2}:
    get:
      summary: Get mutual followers
      description: Get mutual followers between two users
      tags:
        - Follows
      parameters:
        - name: userId1
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId2
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: List of mutual followers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'
        '404':
          $ref: '#/components/responses/NotFound'

  # Group endpoints
  /groups:
    get:
      summary: Get groups
      description: Get a list of groups with optional filters
      tags:
        - Groups
      parameters:
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
        - name: query
          in: query
          description: Search query for group name/description
          schema:
            type: string
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Create group
      description: Create a new group
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreateRequest'
      responses:
        '201':
          description: Group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /groups/{groupId}:
    get:
      summary: Get group
      description: Get group details by ID
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Group details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update group
      description: Update group details
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdateRequest'
      responses:
        '200':
          description: Group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete group
      description: Delete a group (archive)
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Group deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /groups/{groupId}/join:
    post:
      summary: Join group
      description: Join a group or request to join a private group
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Group joined successfully or join request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /groups/{groupId}/leave:
    post:
      summary: Leave group
      description: Leave a group
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Group left successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /groups/{groupId}/members:
    get:
      summary: Get group members
      description: Get members of a group
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: List of group members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /groups/{groupId}/members/{userId}:
    put:
      summary: Update group member
      description: Update a group member's role or status
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum: [member, admin]
                status:
                  type: string
                  enum: [PENDING, APPROVED, BANNED]
                notificationSettings:
                  type: object
                  properties:
                    posts:
                      type: boolean
                    events:
                      type: boolean
                    announcements:
                      type: boolean
      responses:
        '200':
          description: Group member updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Remove member
      description: Remove a member from a group
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: ban
          in: query
          description: Whether to ban the user or just remove them
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: Member removed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /groups/{groupId}/invitations:
    post:
      summary: Invite user to group
      description: Invite a user to join a group
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
              required:
                - userId
      responses:
        '201':
          description: Invitation sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /groups/{groupId}/invitations/{userId}:
    put:
      summary: Respond to group invitation
      description: Accept or reject a group invitation or membership request
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accept:
                  type: boolean
              required:
                - accept
      responses:
        '200':
          description: Invitation response processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Notification endpoints
  /notifications:
    get:
      summary: Get notifications
      description: Get user notifications
      tags:
        - Notifications
      parameters:
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
        - name: types
          in: query
          description: Filter by notification types
          schema:
            type: array
            items:
              type: string
              enum: [LIKE, COMMENT, FOLLOW, MENTION, MESSAGE, SYSTEM]
        - name: read
          in: query
          description: Filter by read status
          schema:
            type: boolean
        - name: delivered
          in: query
          description: Filter by delivery status
          schema:
            type: boolean
      responses:
        '200':
          description: List of notification groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationGroup'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer
                required:
                  - items
                  - total
                  - page
                  - limit
                  - totalPages
        '401':
          $ref: '#/components/responses/Unauthorized'

  /notifications/read:
    post:
      summary: Mark notifications as read
      description: Mark multiple notifications as read
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationIds:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - notificationIds
      responses:
        '204':
          description: Notifications marked as read
        '401':
          $ref: '#/components/responses/Unauthorized'

  /notifications/read/all:
    post:
      summary: Mark all notifications as read
      description: Mark all notifications as read for the current user
      tags:
        - Notifications
      responses:
        '204':
          description: All notifications marked as read
        '401':
          $ref: '#/components/responses/Unauthorized'

  /notifications/count:
    get:
      summary: Get unread notification count
      description: Get count of unread notifications
      tags:
        - Notifications
      responses:
        '200':
          description: Unread notification count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    minimum: 0
                required:
                  - count
        '401':
          $ref: '#/components/responses/Unauthorized'

  /notifications/preferences:
    get:
      summary: Get notification preferences
      description: Get notification preferences for the current user
      tags:
        - Notifications
      responses:
        '200':
          description: User's notification preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferences'
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      summary: Update notification preferences
      description: Update notification preferences for the current user
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPreferences'
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPreferences'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Hashtag endpoints
  /hashtags:
    get:
      summary: Search hashtags
      description: Search hashtags by prefix
      tags:
        - Hashtags
      parameters:
        - name: prefix
          in: query
          required: true
          description: Prefix to search for
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
      responses:
        '200':
          description: List of matching hashtags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hashtag'

  /hashtags/trending:
    get:
      summary: Get trending hashtags
      description: Get trending hashtags
      tags:
        - Hashtags
      parameters:
        - name: timeframe
          in: query
          description: Timeframe in hours to consider
          schema:
            type: integer
            default: 24
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
      responses:
        '200':
          description: List of trending hashtags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrendingHashtag'

  /hashtags/{tag}:
    get:
      summary: Get hashtag
      description: Get details for a specific hashtag
      tags:
        - Hashtags
      parameters:
        - name: tag
          in: path
          required: true
          description: Hashtag (without # symbol)
          schema:
            type: string
      responses:
        '200':
          description: Hashtag details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hashtag'
        '404':
          $ref: '#/components/responses/NotFound'

  /hashtags/{tag}/stats:
    get:
      summary: Get hashtag statistics
      description: Get usage statistics for a hashtag
      tags:
        - Hashtags
      parameters:
        - name: tag
          in: path
          required: true
          description: Hashtag (without # symbol)
          schema:
            type: string
      responses:
        '200':
          description: Hashtag statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashtagStats'
        '404':
          $ref: '#/components/responses/NotFound'

  /hashtags/{tag}/related:
    get:
      summary: Get related hashtags
      description: Get hashtags that are frequently used with this tag
      tags:
        - Hashtags
      parameters:
        - name: tag
          in: path
          required: true
          description: Hashtag (without # symbol)
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 30
      responses:
        '200':
          description: List of related hashtags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hashtag'
        '404':
          $ref: '#/components/responses/NotFound'

  # Feed endpoints
  /feed/home:
    get:
      summary: Get home feed
      description: Get personalized home feed for the current user
      tags:
        - Feeds
      parameters:
        - name: limit
          in: query
          description: Maximum number of posts to return
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of posts to skip
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: startDate
          in: query
          description: Filter posts published after date
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Filter posts published before date
          schema:
            type: string
            format: date-time
        - name: contentTypes
          in: query
          description: Filter by content types
          schema:
            type: array
            items:
              type: string
              enum: [TEXT, IMAGE, VIDEO, LINK, POLL]
        - name: excludedUserIds
          in: query
          description: User IDs to exclude from feed
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: excludedPostIds
          in: query
          description: Post IDs to exclude from feed
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: minEngagementScore
          in: query
          description: Minimum engagement score threshold
          schema:
            type: number
            minimum: 0
            maximum: 1
      responses:
        '200':
          description: Home feed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /feed/explore:
    get:
      summary: Get explore feed
      description: Get discovery feed with trending and recommended content
      tags:
        - Feeds
      parameters:
        - name: limit
          in: query
          description: Maximum number of posts to return
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of posts to skip
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: contentTypes
          in: query
          description: Filter by content types
          schema:
            type: array
            items:
              type: string
              enum: [TEXT, IMAGE, VIDEO, LINK, POLL]
      responses:
        '200':
          description: Explore feed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'

  /feed/hashtag/{tag}:
    get:
      summary: Get hashtag feed
      description: Get posts with a specific hashtag
      tags:
        - Feeds
      parameters:
        - name: tag
          in: path
          required: true
          description: Hashtag (without # symbol)
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of posts to return
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of posts to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Hashtag feed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /feed/profile/{userId}:
    get:
      summary: Get profile feed
      description: Get posts for a user profile
      tags:
        - Feeds
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Maximum number of posts to return
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of posts to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Profile feed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /feed/saved:
    get:
      summary: Get saved feed
      description: Get bookmarked posts for the current user
      tags:
        - Feeds
      parameters:
        - name: limit
          in: query
          description: Maximum number of posts to return
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of posts to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Saved feed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Search endpoints
  /search:
    get:
      summary: Global search
      description: Search across multiple entity types
      tags:
        - Search
      parameters:
        - name: query
          in: query
          required: true
          description: Search query
          schema:
            type: string
        - name: entityTypes
          in: query
          description: Entity types to search
          schema:
            type: array
            items:
              type: string
              enum: [user, post, media, conversation, message, group, comment, hashtag]
        - name: sortBy
          in: query
          description: Sort order
          schema:
            type: string
            enum: [relevance, date, popularity]
            default: relevance
        - $ref: '#/components/parameters/paginationPage'
        - $ref: '#/components/parameters/paginationLimit'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'

  /search/suggestions:
    get:
      summary: Get search suggestions
      description: Get search suggestions based on prefix
      tags:
        - Search
      parameters:
        - name: prefix
          in: query
          required: true
          description: Text prefix to generate suggestions for
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of suggestions
          schema:
            type: integer
            default: 5
            minimum: 1
            maximum: 20
      responses:
        '200':
          description: Search suggestions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string