# Health and Monitoring API
  /health:
    get:
      tags:
        - System
      summary: System health check
      description: Check the health status of the system
      operationId: healthCheck
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, degraded, down]
                  version:
                    type: string
                  uptime:
                    type: number
                  timestamp:
                    type: string
                    format: date-time
        '503':
          description: System is unhealthy

  /metrics:
    get:
      tags:
        - System
      summary: System metrics
      description: Get system metrics and statistics
      operationId: getMetrics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: System metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  database:
                    type: object
                    properties:
                      connections:
                        type: integer
            default: 20
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [relevance, date, popularity]
            default: relevance
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum: [user, post, media, group, comment]
                        title:
                          type: string
                        content:
                          type: string
                        user:
                          $ref: '#/components/schemas/User'
                        createdAt:
                          type: string
                          format: date-time
                        score:
                          type: number
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer

  # User Connections/Relationships API
  /users/connections:
    post:
      tags:
        - Users
      summary: Create connection
      description: Create a new user connection or relationship
      operationId: createUserConnection
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - targetUserId
                - type
              properties:
                targetUserId:
                  type: string
                  format: uuid
                type:
                  type: string
                  enum: [friend, follow, block, colleague]
      responses:
        '201':
          description: Connection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConnection'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '409':
          description: Connection already exists

    get:
      tags:
        - Users
      summary: List connections
      description: Get user connections
      operationId: listUserConnections
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [friend, follow, block, colleague]
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, accepted, rejected]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of user connections
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserConnection'
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer
        '401':
          description: Unauthorized

  /users/connections/{connectionId}:
    put:
      tags:
        - Users
      summary: Update connection
      description: Update a user connection
      operationId: updateUserConnection
      security:
        - bearerAuth: []
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, accepted, rejected]
      responses:
        '200':
          description: Connection updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConnection'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Connection not found

    delete:
      tags:
        - Users
      summary: Delete connection
      description: Delete a user connection
      operationId: deleteUserConnection
      security:
        - bearerAuth: []
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Connection deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Connection not found

  # Media Collections API
  /media/collections:
    post:
      tags:
        - Media
      summary: Create collection
      description: Create a new media collection
      operationId: createMediaCollection
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
                privacy:
                  type: string
                  enum: [public, private, shared]
                  default: private
      responses:
        '201':
          description: Collection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaCollection'
        '400':
          description: Validation error
        '401':
          description: Unauthorized

    get:
      tags:
        - Media
      summary: List collections
      description: Get user's media collections
      operationId: listMediaCollections
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of media collections
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/MediaCollection'
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer
        '401':
          description: Unauthorized

  /media/collections/{collectionId}:
    get:
      tags:
        - Media
      summary: Get collection
      description: Get a specific media collection
      operationId: getMediaCollectionById
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Media collection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaCollection'
        '404':
          description: Collection not found

    put:
      tags:
        - Media
      summary: Update collection
      description: Update a media collection
      operationId: updateMediaCollection
      security:
        - bearerAuth: []
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                privacy:
                  type: string
                  enum: [public, private, shared]
      responses:
        '200':
          description: Collection updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaCollection'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found

    delete:
      tags:
        - Media
      summary: Delete collection
      description: Delete a media collection
      operationId: deleteMediaCollection
      security:
        - bearerAuth: []
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Collection deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection not found

  /media/collections/{collectionId}/items:
    post:
      tags:
        - Media
      summary: Add to collection
      description: Add media to a collection
      operationId: addMediaToCollection
      security:
        - bearerAuth: []
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - mediaId
              properties:
                mediaId:
                  type: string
                  format: uuid
                order:
                  type: integer
      responses:
        '201':
          description: Media added to collection successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  collectionId:
                    type: string
                    format: uuid
                  mediaId:
                    type: string
                    format: uuid
                  order:
                    type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Collection or media not found
        '409':
          description: Media already in collection

    get:
      tags:
        - Media
      summary: List collection items
      description: Get media items in a collection
      operationId: listCollectionItems
      parameters:
        - name: collectionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of media items in collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Media'
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer
        '404':
          description: Collection not found

  # Notification Configuration API
  /notifications/settings:
    get:
      tags:
        - Notifications
      summary: Get notification settings
      description: Get user's notification settings
      operationId: getNotificationSettings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Notification settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
        '401':
          description: Unauthorized

    put:
      tags:
        - Notifications
      summary: Update notification settings
      description: Update user's notification settings
      operationId: updateNotificationSettings
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettings'
      responses:
        '200':
          description: Notification settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
        '400':
          description: Validation error
        '401':
          description: Unauthorized

  /notifications:
    get:
      tags:
        - Notifications
      summary: List notifications
      description: Get user's notifications
      operationId: listNotifications
      security:
        - bearerAuth: []
      parameters:
        - name: read
          in: query
          schema:
            type: boolean
        - name: type
          in: query
          schema:
            type: string
            enum: [like, comment, follow, mention, system]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  totalCount:
                    type: integer
                  unreadCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer
        '401':
          description: Unauthorized          queryCount:
                        type: integer
                      avgQueryTime:
                        type: number
                  cache:
                    type: object
                    properties:
                      hitRate:
                        type: number
                      size:
                        type: integer
                      missCount:
                        type: integer
                  websocket:
                    type: object
                    properties:
                      connections:
                        type: integer
                      messageRate:
                        type: number
                  jobs:
                    type: object
                    properties:
                      active:
                        type: integer
                      waiting:
                        type: integer
                      completed:
                        type: integer
                      failed:
                        type: integer
                  memory:
                    type: object
                    properties:
                      used:
                        type: integer
                      free:
                        type: integer
                      total:
                        type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  # Categories API (for Discovery)
  /categories:
    get:
      tags:
        - Discovery
      summary: List categories
      description: Get a list of content categories
      operationId: listCategories
      parameters:
        - name: parentId
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer

    post:
      tags:
        - Discovery
      summary: Create category
      description: Create a new content category
      operationId: createCategory
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
                parentId:
                  type: string
                  format: uuid
                order:
                  type: integer
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /categories/{categoryId}:
    get:
      tags:
        - Discovery
      summary: Get category
      description: Get a specific category
      operationId: getCategoryById
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found

    put:
      tags:
        - Discovery
      summary: Update category
      description: Update a category
      operationId: updateCategory
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                parentId:
                  type: string
                  format: uuid
                order:
                  type: integer
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Category not found

    delete:
      tags:
        - Discovery
      summary: Delete category
      description: Delete a category
      operationId: deleteCategory
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Category deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Category not found
        '409':
          description: Category is in use and cannot be deleted

  # Tags API
  /tags:
    get:
      tags:
        - Discovery
      summary: List tags
      description: Get a list of content tags
      operationId: listTags
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer

    post:
      tags:
        - Discovery
      summary: Create tag
      description: Create a new content tag
      operationId: createTag
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '409':
          description: Tag already exists

  # Group & Community API
  /groups:
    post:
      tags:
        - Community
      summary: Create group
      description: Create a new community group
      operationId: createGroup
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
                privacy:
                  type: string
                  enum: [public, private, hidden]
                  default: public
                maxMembers:
                  type: integer
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Validation error
        '401':
          description: Unauthorized

    get:
      tags:
        - Community
      summary: List groups
      description: Get a list of community groups
      operationId: listGroups
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer

  /groups/{groupId}:
    get:
      tags:
        - Community
      summary: Get group
      description: Get a specific group
      operationId: getGroupById
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Group details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group not found

  /groups/{groupId}/members:
    post:
      tags:
        - Community
      summary: Add member
      description: Add a member to a group
      operationId: addGroupMember
      security:
        - bearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  format: uuid
                role:
                  type: string
                  enum: [member, moderator, admin]
                  default: member
      responses:
        '201':
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Group not found
        '409':
          description: User is already a member

    get:
      tags:
        - Community
      summary: List members
      description: Get members of a group
      operationId: listGroupMembers
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of group members
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupMember'
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer
        '404':
          description: Group not found

  # Analytics API
  /analytics/user-activity:
    get:
      tags:
        - Analytics
      summary: Get user activity
      description: Get analytics on user activity
      operationId: getUserActivity
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          schema:
            type: string
            enum: [login, pageview, interaction, search]
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: User activity analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  activities:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserActivity'
                  summary:
                    type: object
                    properties:
                      totalCount:
                        type: integer
                      byType:
                        type: object
                        additionalProperties:
                          type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /analytics/content-metrics:
    get:
      tags:
        - Analytics
      summary: Get content metrics
      description: Get analytics on content engagement
      operationId: getContentMetrics
      security:
        - bearerAuth: []
      parameters:
        - name: contentId
          in: query
          schema:
            type: string
            format: uuid
        - name: contentType
          in: query
          schema:
            type: string
            enum: [post, media, page]
        - name: metric
          in: query
          schema:
            type: string
            enum: [views, likes, comments, shares, time_spent]
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: interval
          in: query
          schema:
            type: string
            enum: [day, week, month]
            default: day
      responses:
        '200':
          description: Content metrics analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  metrics:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContentMetric'
                  summary:
                    type: object
                    properties:
                      total:
                        type: integer
                      average:
                        type: number
                      peak:
                        type: object
                        properties:
                          value:
                            type: integer
                          date:
                            type: string
                            format: date
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        
  # Content Moderation API
  /moderation/content-filter:
    post:
      tags:
        - Moderation
      summary: Filter content
      description: Check if content should be filtered
      operationId: filterContent
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - contentType
              properties:
                content:
                  type: string
                contentType:
                  type: string
                  enum: [text, image, video]
      responses:
        '200':
          description: Content filter results
          content:
            application/json:
              schema:
                type: object
                properties:
                  filtered:
                    type: boolean
                  reasons:
                    type: array
                    items:
                      type: string
                  confidence:
                    type: number
        '400':
          description: Validation error
        '401':
          description: Unauthorized

  # Search API
  /search:
    get:
      tags:
        - Discovery
      summary: Search content
      description: Search across all content types
      operationId: search
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: types
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [user, post, media, group, comment]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            # OpenAPI Documentation

## Overview

This OpenAPI documentation describes the REST API for a full-featured application built on a modular architecture with robust infrastructure components. The API provides access to various services including user management, media handling, messaging, social features, and more.

```yaml
openapi: 3.0.3
info:
  title: Application API
  description: API for accessing application services and resources
  version: 1.0.0
  contact:
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3003/api
    description: Development server
  - url: https://api.example.com
    description: Production server

tags:
  - name: Auth
    description: Authentication and user management
  - name: Media
    description: Media file management and processing
  - name: Social
    description: Social interactions and content
  - name: Messaging
    description: User-to-user messaging
  - name: Storage
    description: File storage operations
  - name: Jobs
    description: Background job management
  - name: Configuration
    description: System configuration
  - name: Analytics
    description: User and content analytics
  - name: Moderation
    description: Content moderation and reporting

paths:
  # Authentication & User Management API
  /auth/login:
    post:
      tags:
        - Auth
      summary: User login
      description: Authenticate user and get access token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: date-time
          
# WebSocket API Documentation

In addition to the REST API endpoints documented above, the application provides real-time features via WebSocket connections. The WebSocket API enables clients to receive updates in real-time without polling the server.

## WebSocket Connection

To establish a WebSocket connection:

```
WebSocket URL: ws://localhost:3003/ws
```

Authentication is performed by sending an authentication message after connection is established.

## Message Format

All WebSocket messages follow this general format:

```json
{
  "type": "message_type",
  "eventType": "specific_event",
  "channel": "optional_channel",
  "data": {},
  "messageId": "unique_message_id"
}
```

## Authentication

After connecting, clients should authenticate:

```json
{
  "type": "auth",
  "data": {
    "userId": "user_id",
    "token": "jwt_token"
  }
}
```

The server will respond with:

```json
{
  "type": "auth_success",
  "data": {
    "userId": "user_id",
    "clientId": "client_id"
  }
}
```

## Subscriptions

Clients can subscribe to specific channels:

```json
{
  "type": "subscribe",
  "data": {
    "channel": "channel_name"
  }
}
```

Available channels include:
- `user:{userId}` - User-specific events
- `post:{postId}` - Updates for a specific post
- `conversation:{conversationId}` - Real-time messaging
- `presence:{userId}` - User presence updates

## Event Types

The server sends various event types to subscribed clients:

### Message Events
- `message_new` - New message in a conversation
- `message_updated` - Message was edited
- `message_deleted` - Message was deleted

### Post Events
- `post_new` - New post created
- `post_updated` - Post was edited
- `post_deleted` - Post was deleted
- `post_liked` - Post was liked
- `comment_new` - New comment on post

### Notification Events
- `notification` - General notification
- `friend_request` - Friend request
- `mention` - User mentioned

### System Events
- `system` - System messages
- `error` - Error messages

## Presence

Clients can receive presence updates for users:

```json
{
  "type": "message",
  "eventType": "presence_update",
  "data": {
    "userId": "user_id",
    "status": "online|offline",
    "lastSeen": "2023-01-01T12:00:00Z"
  }
}
```

## Example Workflow

1. Connect to WebSocket
2. Authenticate
3. Subscribe to channels
4. Receive real-time updates
5. Send acknowledgments for received messages

## Logging System

Provides comprehensive logging with:
- Multiple log levels (debug, info, warn, error)
- Structured logging with metadata
- Context-based logger hierarchies
- Pluggable transport system
- Performance metrics collection
- Correlation ID tracking for request tracing

The server may send error messages:

```json
{
  "type": "error",
  "data": {
    "message": "Error message",
    "code": "ERROR_CODE"
  }
}
```

Common error codes:
- `INVALID_MESSAGE` - Message format is invalid
- `UNAUTHORIZED` - Not authenticated
- `SUBSCRIPTION_ERROR` - Error in channel subscription
- `RATE_LIMITED` - Too many messages sent

# Infrastructure Components

The API is built on a robust infrastructure with several core components:

## Cache Service

Provides in-memory caching for improved performance with the following features:
- Key-value storage
- TTL (Time-To-Live) support
- Memoization of expensive operations
- Multiple key operations (getMultiple, setMultiple)
- Cache statistics tracking
- Integration with other infrastructure components

## Database Service

Manages database connections and operations with:
- Transaction support with retries
- Query building with a fluent API
- Connection pooling
- Metrics tracking
- Performance monitoring

## Job Service

Handles background processing with:
- Priority queues
- Job scheduling with delays
- Retry mechanisms with configurable backoff
- Dependencies between jobs
- Job status tracking and statistics
- Multiple job types for different background processes
- Cancellation and pausing support

## Storage Service

Manages file storage with:
- File uploads/downloads
- Media processing (images, videos, audio)
- Stream support with throttling
- Metadata tracking
- Image optimization and resizing
- Video transcoding
- Thumbnail generation
- Content type detection
- File collections and organization

## WebSocket Service

Provides real-time communication with:
- Client connection tracking
- Channel-based subscriptions
- Message delivery with acknowledgments
- Presence tracking
- User activity monitoring
- Connection state management
- Secure authentication
- Message rate limiting

## Error Handling

The API uses consistent error responses with structured domain-specific errors:

```json
{
  "success": false,
  "error": {
    "message": "Error message",
    "code": "ERROR_CODE",
    "details": {}
  }
}
```

Error categories include:
- Domain-specific errors (user, post, comment, etc.)
- Infrastructure errors (database, cache, network)
- Technical errors (configuration, initialization)
- Validation errors

Common HTTP status codes:
- `400` - Bad Request (validation errors)
- `401` - Unauthorized (authentication required)
- `403` - Forbidden (insufficient permissions)
- `404` - Not Found (resource doesn't exist)
- `409` - Conflict (resource already exists)
- `429` - Too Many Requests (rate limiting)
- `500` - Internal Server Error
        updatedAt:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        conversationId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        content:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Media'
        read:
          type: boolean
        readAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'

    StorageFile:
      type: object
      properties:
        path:
          type: string
        url:
          type: string
          format: uri
        contentType:
          type: string
        size:
          type: integer
        lastModified:
          type: string
          format: date-time
        etag:
          type: string

    Job:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - media_processing
            - video_transcoding
            - image_optimization
            - thumbnail_generation
            - email_notification
            - push_notification
            - feed_generation
            - content_indexing
            - user_onboarding
            - account_cleanup
            - database_backup
            - cache_maintenance
            - report_generation
        status:
          type: string
          enum: [waiting, active, completed, failed, delayed]
        data:
          type: object
          additionalProperties: true
        priority:
          type: integer
        attempts:
          type: integer
        maxAttempts:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        scheduledFor:
          type: string
          format: date-time
        result:
          type: object
          properties:
            success:
              type: boolean
            error:
              type: string
            data:
              type: object
              additionalProperties: true

    Report:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        contentType:
          type: string
          enum: [post, comment, media, user, message]
        contentId:
          type: string
          format: uuid
        reason:
          type: string
          enum: [spam, harassment, inappropriate, violence, other]
        details:
          type: string
        status:
          type: string
          enum: [pending, reviewing, resolved, rejected]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  userId:
                    type: string
                    format: uuid
                  refreshToken:
                    type: string
        '401':
          description: Invalid credentials
        '429':
          description: Too many login attempts

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register new user
      description: Create a new user account
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    format: uuid
                  message:
                    type: string
        '400':
          description: Validation error
        '409':
          description: Email already in use

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh access token
      description: Get a new access token using refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Invalid refresh token

  /auth/logout:
    post:
      tags:
        - Auth
      summary: User logout
      description: Invalidate current session
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully
        '401':
          description: Unauthorized

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: Send password reset email
      operationId: requestPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset email sent
        '404':
          description: Email not found
        '429':
          description: Too many requests

  /auth/reset-password/{token}:
    post:
      tags:
        - Auth
      summary: Complete password reset
      description: Reset password using token
      operationId: resetPassword
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - newPassword
              properties:
                newPassword:
                  type: string
                  format: password
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid password
        '404':
          description: Invalid token

  # User Profile API
  /users/me:
    get:
      tags:
        - Auth
      summary: Get current user profile
      description: Get profile of authenticated user
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /users/{userId}:
    get:
      tags:
        - Auth
      summary: Get user profile
      description: Get profile of a specific user
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  # Media API
  /media:
    post:
      tags:
        - Media
      summary: Upload media
      description: Upload a new media file
      operationId: uploadMedia
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          description: Media uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          description: Invalid file
        '401':
          description: Unauthorized
        '413':
          description: File too large

    get:
      tags:
        - Media
      summary: List media
      description: Get a list of media files
      operationId: listMedia
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [image, video, audio, document]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of media files
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Media'
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer
        '401':
          description: Unauthorized

  /media/{mediaId}:
    get:
      tags:
        - Media
      summary: Get media
      description: Get a specific media file
      operationId: getMediaById
      parameters:
        - name: mediaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Media details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '404':
          description: Media not found

    put:
      tags:
        - Media
      summary: Update media
      description: Update media metadata
      operationId: updateMedia
      security:
        - bearerAuth: []
      parameters:
        - name: mediaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Media updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Media not found

    delete:
      tags:
        - Media
      summary: Delete media
      description: Delete a media file
      operationId: deleteMedia
      security:
        - bearerAuth: []
      parameters:
        - name: mediaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Media deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Media not found

  /media/{mediaId}/process:
    post:
      tags:
        - Media
        - Jobs
      summary: Process media
      description: Start a media processing job
      operationId: processMedia
      security:
        - bearerAuth: []
      parameters:
        - name: mediaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operations:
                  type: array
                  items:
                    type: string
                    enum: [resize, optimize, thumbnail, transcode]
                options:
                  type: object
                  properties:
                    width:
                      type: integer
                    height:
                      type: integer
                    quality:
                      type: integer
                      minimum: 1
                      maximum: 100
                    format:
                      type: string
                      enum: [jpeg, png, webp, mp4, webm]
      responses:
        '202':
          description: Processing job started
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                  status:
                    type: string
                    enum: [pending, processing]
        '401':
          description: Unauthorized
        '404':
          description: Media not found

  # Social API
  /posts:
    post:
      tags:
        - Social
      summary: Create post
      description: Create a new social post
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Validation error
        '401':
          description: Unauthorized

    get:
      tags:
        - Social
      summary: List posts
      description: Get a list of posts
      operationId: listPosts
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer

  /posts/{postId}:
    get:
      tags:
        - Social
      summary: Get post
      description: Get a specific post
      operationId: getPostById
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found

    put:
      tags:
        - Social
      summary: Update post
      description: Update a post
      operationId: updatePost
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Post not found

    delete:
      tags:
        - Social
      summary: Delete post
      description: Delete a post
      operationId: deletePost
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Post deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Post not found

  /posts/{postId}/like:
    post:
      tags:
        - Social
      summary: Like post
      description: Like a post
      operationId: likePost
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post liked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked:
                    type: boolean
                  likeCount:
                    type: integer
        '401':
          description: Unauthorized
        '404':
          description: Post not found

  /posts/{postId}/comments:
    post:
      tags:
        - Social
      summary: Add comment
      description: Add a comment to a post
      operationId: addComment
      security:
        - bearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                parentId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
        '404':
          description: Post not found

    get:
      tags:
        - Social
      summary: List comments
      description: Get comments for a post
      operationId: listComments
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer
        '404':
          description: Post not found

  # Messaging API
  /conversations:
    post:
      tags:
        - Messaging
      summary: Create conversation
      description: Start a new conversation
      operationId: createConversation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - participants
              properties:
                participants:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 1
                title:
                  type: string
      responses:
        '201':
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          description: Validation error
        '401':
          description: Unauthorized

    get:
      tags:
        - Messaging
      summary: List conversations
      description: Get user's conversations
      operationId: listConversations
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer
        '401':
          description: Unauthorized

  /conversations/{conversationId}/messages:
    post:
      tags:
        - Messaging
      summary: Send message
      description: Send a message in a conversation
      operationId: sendMessage
      security:
        - bearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                attachments:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Conversation not found

    get:
      tags:
        - Messaging
      summary: List messages
      description: Get messages in a conversation
      operationId: listMessages
      security:
        - bearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: beforeId
          in: query
          schema:
            type: string
            format: uuid
        - name: afterId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  totalCount:
                    type: integer
                  hasMore:
                    type: boolean
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Conversation not found

  # Storage API
  /storage/files:
    post:
      tags:
        - Storage
      summary: Upload file
      description: Upload a file to storage
      operationId: uploadFile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                path:
                  type: string
                  description: Storage path
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageFile'
        '401':
          description: Unauthorized
        '413':
          description: File too large

  /storage/files/{path}:
    get:
      tags:
        - Storage
      summary: Get file
      description: Get a file from storage
      operationId: getFile
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found

    delete:
      tags:
        - Storage
      summary: Delete file
      description: Delete a file from storage
      operationId: deleteFile
      security:
        - bearerAuth: []
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: File deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: File not found

  # Background Jobs API
  /jobs:
    post:
      tags:
        - Jobs
      summary: Create job
      description: Create a new background job
      operationId: createJob
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - data
              properties:
                type:
                  type: string
                  enum:
                    - media_processing
                    - video_transcoding
                    - image_optimization
                    - thumbnail_generation
                    - email_notification
                    - push_notification
                    - feed_generation
                    - content_indexing
                    - user_onboarding
                    - account_cleanup
                    - database_backup
                    - cache_maintenance
                    - report_generation
                data:
                  type: object
                  additionalProperties: true
                options:
                  type: object
                  properties:
                    priority:
                      type: integer
                    delay:
                      type: integer
                      description: Delay in milliseconds
                    attempts:
                      type: integer
                    dependsOn:
                      type: array
                      items:
                        type: string
      responses:
        '202':
          description: Job created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                  status:
                    type: string
                    enum: [waiting, delayed]
        '400':
          description: Validation error
        '401':
          description: Unauthorized

    get:
      tags:
        - Jobs
      summary: List jobs
      description: Get a list of jobs
      operationId: listJobs
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [waiting, active, completed, failed, delayed]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
                  totalCount:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer
        '401':
          description: Unauthorized

  /jobs/{jobId}:
    get:
      tags:
        - Jobs
      summary: Get job
      description: Get a specific job
      operationId: getJobById
      security:
        - bearerAuth: []
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '401':
          description: Unauthorized
        '404':
          description: Job not found

  # Configuration API
  /config:
    get:
      tags:
        - Configuration
      summary: Get configuration
      description: Get system configuration
      operationId: getConfiguration
      security:
        - bearerAuth: []
      responses:
        '200':
          description: System configuration
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  # Moderation API
  /reports:
    post:
      tags:
        - Moderation
      summary: Create report
      description: Report inappropriate content
      operationId: createReport
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - contentType
                - contentId
                - reason
              properties:
                contentType:
                  type: string
                  enum: [post, comment, media, user, message]
                contentId:
                  type: string
                  format: uuid
                reason:
                  type: string
                  enum: [spam, harassment, inappropriate, violence, other]
                details:
                  type: string
      responses:
        '201':
          description: Report created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '429':
          description: Too many reports

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistration:
      type: object
      required:
        - email
        - password
        - username
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, inactive, suspended]
        roles:
          type: array
          items:
            type: string

    Media:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        contentType:
          type: string
        size:
          type: integer
        url:
          type: string
          format: uri
        thumbnailUrl:
          type: string
          format: uri
        dimensions:
          type: object
          properties:
            width:
              type: integer
            height:
              type: integer
        duration:
          type: number
          description: Duration in seconds for audio/video
        metadata:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    PostInput:
      type: object
      required:
        - content
      properties:
        content:
          type: string
        media:
          type: array
          items:
            type: string
            format: uuid
        visibility:
          type: string
          enum: [public, followers, private]
          default: public

    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        content:
          type: string
        media:
          type: array
          items:
            $ref: '#/components/schemas/Media'
        likeCount:
          type: integer
        commentCount:
          type: integer
        visibility:
          type: string
          enum: [public, followers, private]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'

    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        postId:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        content:
          type: string
        likeCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'

    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        participants:
          type: array
          items:
            $ref: '#/components/schemas/User'
        lastMessage:
          $ref: '#/components/schemas/Message'
        unreadCount:
          type: integer
        createdAt:
          type: string
          format