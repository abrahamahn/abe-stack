openapi: 3.0.3
info:
  title: Application API
  description: API for managing various application resources including users, media, social interactions, and more.
  version: 1.0.0
  
servers:
  - url: '/api/v1'
    description: API v1
    
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    # Auth schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        displayName:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        profileImage:
          type: string
          nullable: true
        bannerImage:
          type: string
          nullable: true
        role:
          type: string
        isVerified:
          type: boolean
        emailConfirmed:
          type: boolean
        type:
          type: string
          enum: [premium, verified, standard, restricted]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - username
        - email
        - role
        - isVerified
        - emailConfirmed
        - type
        - createdAt
        - updatedAt
    
    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        inheritsFrom:
          type: string
          format: uuid
          nullable: true
        isSystem:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - createdAt
        - updatedAt
    
    Permission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        resource:
          type: string
        action:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - resource
        - action
        - createdAt
        - updatedAt
    
    Token:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
        tokenType:
          type: string
          default: Bearer
      required:
        - accessToken
        - expiresIn
        - tokenType
    
    # Social schemas
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          type: string
          enum: [text, image, video, link, poll]
        content:
          type: string
        status:
          type: string
          enum: [draft, published, scheduled, archived, deleted, pending_review]
        visibility:
          type: string
          enum: [public, followers, private, unlisted]
        location:
          type: object
          properties:
            name:
              type: string
            latitude:
              type: number
            longitude:
              type: number
          nullable: true
        mediaIds:
          type: array
          items:
            type: string
            format: uuid
        likeCount:
          type: integer
        commentCount:
          type: integer
        shareCount:
          type: integer
        viewCount:
          type: integer
        isEdited:
          type: boolean
        isPinned:
          type: boolean
        parentId:
          type: string
          format: uuid
          nullable: true
        originalPostId:
          type: string
          format: uuid
          nullable: true
        scheduledAt:
          type: string
          format: date-time
          nullable: true
        publishedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - type
        - content
        - status
        - visibility
        - createdAt
        - updatedAt
    
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        targetId:
          type: string
          format: uuid
        targetType:
          type: string
          enum: [post, comment, media, article]
        parentId:
          type: string
          format: uuid
          nullable: true
        content:
          type: string
        likeCount:
          type: integer
        replyCount:
          type: integer
        status:
          type: string
          enum: [active, deleted, pending_review]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - targetId
        - targetType
        - content
        - status
        - createdAt
        - updatedAt
    
    CommentLike:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        commentId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - commentId
        - createdAt
        - updatedAt
    
    Follow:
      type: object
      properties:
        id:
          type: string
          format: uuid
        followerId:
          type: string
          format: uuid
        followingId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - followerId
        - followingId
        - createdAt
        - updatedAt
    
    Like:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        targetId:
          type: string
          format: uuid
        targetType:
          type: string
          enum: [post, comment, media, article]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - targetId
        - targetType
        - createdAt
        - updatedAt
    
    Bookmark:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        targetId:
          type: string
          format: uuid
        targetType:
          type: string
          enum: [post, comment, media, article, user]
        collectionId:
          type: string
          format: uuid
          nullable: true
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - targetId
        - targetType
        - createdAt
        - updatedAt
    
    Collection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        isPublic:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - name
        - isPublic
        - createdAt
        - updatedAt
    
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [LIKE, COMMENT, FOLLOW, MENTION, MESSAGE, SYSTEM]
        userId:
          type: string
          format: uuid
        actorId:
          type: string
          format: uuid
          nullable: true
        entityId:
          type: string
          format: uuid
          nullable: true
        entityType:
          type: string
          enum: [user, post, comment, media, group, message]
          nullable: true
        content:
          type: string
          nullable: true
        read:
          type: boolean
        delivered:
          type: boolean
        metadata:
          type: object
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - type
        - userId
        - read
        - delivered
        - createdAt
        - updatedAt
    
    Hashtag:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tag:
          type: string
        normalizedTag:
          type: string
        category:
          type: string
          enum: [GENERAL, TECH, ARTS, SPORTS, TRAVEL, FOOD, HEALTH, BUSINESS, EDUCATION, OTHER]
        usageCount:
          type: integer
        isOfficial:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - tag
        - normalizedTag
        - category
        - usageCount
        - createdAt
        - updatedAt
    
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        conversationId:
          type: string
          format: uuid
        senderId:
          type: string
          format: uuid
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - conversationId
        - senderId
        - content
        - createdAt
        - updatedAt
    
    # Moderation schemas
    ContentReport:
      type: object
      properties:
        id:
          type: string
          format: uuid
        reporterId:
          type: string
          format: uuid
        contentId:
          type: string
          format: uuid
        contentType:
          type: string
          enum: [user, post, comment, media, group, message]
        contentOwnerId:
          type: string
          format: uuid
          nullable: true
        type:
          type: string
          enum: [SPAM, HARASSMENT, HATE_SPEECH, VIOLENCE, NUDITY, COPYRIGHT, OTHER]
        description:
          type: string
          nullable: true
        evidence:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [PENDING, IN_REVIEW, RESOLVED, DISMISSED]
        severity:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        reviewerId:
          type: string
          format: uuid
          nullable: true
        resolution:
          type: string
          nullable: true
        reviewNotes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - reporterId
        - contentId
        - contentType
        - type
        - status
        - severity
        - createdAt
        - updatedAt
    
    ModerationAction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        targetId:
          type: string
          format: uuid
        targetType:
          type: string
          enum: [user, post, comment, media, group, message]
        actionType:
          type: string
          enum: [WARNING, CONTENT_REMOVAL, TEMPORARY_BAN, PERMANENT_BAN, ACCOUNT_RESTRICTION]
        reason:
          type: string
        metadata:
          type: object
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - targetId
        - targetType
        - actionType
        - reason
        - createdAt
        - updatedAt
    
    # Error responses
    Error:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
      required:
        - statusCode
        - error
        - message
    
    ValidationError:
      type: object
      properties:
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              code:
                type: string
                nullable: true
      required:
        - statusCode
        - error
        - message
        - details

security:
  - bearerAuth: []

paths:
  # Auth endpoints
  /auth/login:
    post:
      summary: Authenticate user and return tokens
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                displayName:
                  type: string
                  nullable: true
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /auth/refresh:
    post:
      summary: Refresh access token
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
      responses:
        '200':
          description: New tokens issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/logout:
    post:
      summary: Logout current user
      tags:
        - Authentication
      responses:
        '204':
          description: Logout successful
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/password-reset:
    post:
      summary: Request password reset
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '204':
          description: Password reset email sent
        '400':
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Role endpoints
  /roles:
    get:
      summary: Get roles
      tags:
        - Roles
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
    
    post:
      summary: Create role
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
                inheritsFrom:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  
  /roles/{id}:
    get:
      summary: Get role by ID
      tags:
        - Roles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Role details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    
    put:
      summary: Update role
      tags:
        - Roles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
                inheritsFrom:
                  type: string
                  format: uuid
                  nullable: true
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    
    delete:
      summary: Delete role
      tags:
        - Roles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Role deleted
        '400':
          description: Cannot delete system role or role in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /roles/{id}/permissions:
    get:
      summary: Get role permissions
      tags:
        - Roles
        - Permissions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Role permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Assign permission to role
      tags:
        - Roles
        - Permissions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissionId:
                  type: string
                  format: uuid
              required:
                - permissionId
      responses:
        '200':
          description: Permission assigned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
  
  /roles/{id}/permissions/{permissionId}:
    delete:
      summary: Remove permission from role
      tags:
        - Roles
        - Permissions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Permission removed
        '404':
          description: Role, permission, or association not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Permission endpoints
  /permissions:
    get:
      summary: Get permissions
      tags:
        - Permissions
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: resource
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permission'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
    
    post:
      summary: Create permission
      tags:
        - Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
                resource:
                  type: string
                action:
                  type: string
              required:
                - resource
                - action
      responses:
        '201':
          description: Permission created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          description: Validation error or duplicate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  
  /permissions/{id}:
    get:
      summary: Get permission by ID
      tags:
        - Permissions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Permission details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
    
    put:
      summary: Update permission
      tags:
        - Permissions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
                resource:
                  type: string
                action:
                  type: string
      responses:
        '200':
          description: Permission updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          description: Validation error or system permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    
    delete:
      summary: Delete permission
      tags:
        - Permissions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Permission deleted
        '400':
          description: Cannot delete system permission or permission in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Permission not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # User endpoints
  /users:
    get:
      summary: Get users
      tags:
        - Users
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: role
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
  
  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    
    put:
      summary: Update user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                profileImage:
                  type: string
                bannerImage:
                  type: string
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    
    delete:
      summary: Delete user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Moderation endpoints
  /reports:
    get:
      summary: Get content reports
      tags:
        - Moderation
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING, IN_REVIEW, RESOLVED, DISMISSED]
        - name: type
          in: query
          schema:
            type: string
            enum: [SPAM, HARASSMENT, HATE_SPEECH, VIOLENCE, NUDITY, COPYRIGHT, OTHER]
        - name: severity
          in: query
          schema:
            type: string
            enum: [LOW, MEDIUM, HIGH, CRITICAL]
        - name: contentType
          in: query
          schema:
            type: string
            enum: [user, post, comment, media, group, message]
      responses:
        '200':
          description: Content reports
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContentReport'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
    
    post:
      summary: Create content report
      tags:
        - Moderation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contentId:
                  type: string
                  format: uuid
                contentType:
                  type: string
                  enum: [user, post, comment, media, group, message]
                type:
                  type: string
                  enum: [SPAM, HARASSMENT, HATE_SPEECH, VIOLENCE, NUDITY, COPYRIGHT, OTHER]
                description:
                  type: string
                evidence:
                  type: array
                  items:
                    type: string
              required:
                - contentId
                - contentType
                - type
      responses:
        '201':
          description: Report created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentReport'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  
/reports/{id}:
    get:
      summary: Get report by ID
      tags:
        - Moderation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Report details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentReport'
    
    put:
      summary: Update report
      tags:
        - Moderation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [PENDING, IN_REVIEW, RESOLVED, DISMISSED]
                severity:
                  type: string
                  enum: [LOW, MEDIUM, HIGH, CRITICAL]
                reviewerId:
                  type: string
                  format: uuid
                resolution:
                  type: string
                reviewNotes:
                  type: string
      responses:
        '200':
          description: Report updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentReport'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  
  /reports/{id}/resolve:
    post:
      summary: Resolve report
      tags:
        - Moderation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resolution:
                  type: string
              required:
                - resolution
      responses:
        '200':
          description: Report resolved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentReport'
  
  /reports/{id}/dismiss:
    post:
      summary: Dismiss report
      tags:
        - Moderation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
              required:
                - reason
      responses:
        '200':
          description: Report dismissed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentReport'
  
  /reports/{id}/assign:
    post:
      summary: Assign report to reviewer
      tags:
        - Moderation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewerId:
                  type: string
                  format: uuid
              required:
                - reviewerId
      responses:
        '200':
          description: Report assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentReport'
  
  # New endpoint based on repository code
  /reports/{id}/evidence:
    post:
      summary: Add evidence to report
      tags:
        - Moderation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                evidenceUrl:
                  type: string
              required:
                - evidenceUrl
      responses:
        '200':
          description: Evidence added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentReport'
        '404':
          description: Report not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /reports/statistics:
    get:
      summary: Get report statistics
      tags:
        - Moderation
      responses:
        '200':
          description: Report statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  pending:
                    type: integer
                  inReview:
                    type: integer
                  resolved:
                    type: integer
                  dismissed:
                    type: integer
                  byType:
                    type: object
                    additionalProperties:
                      type: integer
                  bySeverity:
                    type: object
                    additionalProperties:
                      type: integer
  
  # Moderation Actions endpoints from ModerationActionRepository
  /moderation/actions:
    get:
      summary: Get moderation actions
      tags:
        - Moderation
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: type
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
        - name: targetType
          in: query
          schema:
            type: string
            enum: [user, post, comment, media, group, message]
      responses:
        '200':
          description: List of moderation actions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModerationAction'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
    
    post:
      summary: Create moderation action
      tags:
        - Moderation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetId:
                  type: string
                  format: uuid
                targetType:
                  type: string
                  enum: [user, post, comment, media, group, message]
                actionType:
                  type: string
                  enum: [WARNING, CONTENT_REMOVAL, TEMPORARY_BAN, PERMANENT_BAN, ACCOUNT_RESTRICTION]
                reason:
                  type: string
                metadata:
                  type: object
              required:
                - targetId
                - targetType
                - actionType
                - reason
      responses:
        '201':
          description: Action created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModerationAction'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  
  /moderation/actions/{id}:
    get:
      summary: Get moderation action by ID
      tags:
        - Moderation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Moderation action details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModerationAction'
    
    put:
      summary: Update moderation action
      tags:
        - Moderation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actionType:
                  type: string
                  enum: [WARNING, CONTENT_REMOVAL, TEMPORARY_BAN, PERMANENT_BAN, ACCOUNT_RESTRICTION]
                reason:
                  type: string
                metadata:
                  type: object
      responses:
        '200':
          description: Action updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModerationAction'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    
    delete:
      summary: Delete moderation action
      tags:
        - Moderation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Action deleted
        '404':
          description: Action not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /moderation/actions/{id}/apply:
    post:
      summary: Apply moderation action
      tags:
        - Moderation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Action applied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModerationAction'
        '404':
          description: Action not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /moderation/actions/{id}/reverse:
    post:
      summary: Reverse moderation action
      tags:
        - Moderation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Action reversed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModerationAction'
        '404':
          description: Action not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /moderation/actions/{id}/expire:
    post:
      summary: Expire temporary moderation action
      tags:
        - Moderation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Action expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModerationAction'
        '404':
          description: Action not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /moderation/actions/{id}/extend:
    put:
      summary: Extend temporary action expiration
      tags:
        - Moderation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                daysToAdd:
                  type: integer
                  minimum: 1
              required:
                - daysToAdd
      responses:
        '200':
          description: Expiration extended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModerationAction'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Action not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /moderation/actions/counts-by-type:
    get:
      summary: Get count of actions by type
      tags:
        - Moderation
      responses:
        '200':
          description: Action counts by type
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
  
  /moderation/actions/active:
    get:
      summary: Get active moderation actions
      tags:
        - Moderation
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of active actions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModerationAction'
  
  /moderation/actions/expired:
    get:
      summary: Get expired moderation actions
      tags:
        - Moderation
      responses:
        '200':
          description: List of expired actions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModerationAction'
  
  # Posts endpoints
  /posts:
    get:
      summary: Get posts
      tags:
        - Posts
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, scheduled, archived, deleted, pending_review]
        - name: type
          in: query
          schema:
            type: string
            enum: [text, image, video, link, poll]
        - name: visibility
          in: query
          schema:
            type: string
            enum: [public, followers, private, unlisted]
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
    
    post:
      summary: Create post
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [text, image, video, link, poll]
                content:
                  type: string
                status:
                  type: string
                  enum: [draft, published, scheduled, archived, pending_review]
                  default: published
                visibility:
                  type: string
                  enum: [public, followers, private, unlisted]
                  default: public
                mediaIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                parentId:
                  type: string
                  format: uuid
                  nullable: true
                originalPostId:
                  type: string
                  format: uuid
                  nullable: true
                scheduledAt:
                  type: string
                  format: date-time
                  nullable: true
              required:
                - type
                - content
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  
  /posts/{id}:
    get:
      summary: Get post by ID
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update post
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                status:
                  type: string
                  enum: [draft, published, scheduled, archived, pending_review]
                visibility:
                  type: string
                  enum: [public, followers, private, unlisted]
                mediaIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                isPinned:
                  type: boolean
                scheduledAt:
                  type: string
                  format: date-time
                  nullable: true
      responses:
        '200':
          description: Post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete post
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Post deleted
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Additional post endpoints from PostRepository
  /posts/status/{status}:
    get:
      summary: Get posts by status
      tags:
        - Posts
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum: [draft, published, scheduled, archived, deleted, pending_review]
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Posts with status
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  count:
                    type: integer
  
  /posts/scheduled:
    get:
      summary: Get scheduled posts
      tags:
        - Posts
      responses:
        '200':
          description: Scheduled posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  
  /posts/{id}/permanent:
    delete:
      summary: Permanently delete post
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Post permanently deleted
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Comment endpoints from CommentRepository
  /comments:
    get:
      summary: Get comments
      tags:
        - Comments
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    
    post:
      summary: Create comment
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetId:
                  type: string
                  format: uuid
                targetType:
                  type: string
                  enum: [post, comment, media, article]
                parentId:
                  type: string
                  format: uuid
                  nullable: true
                content:
                  type: string
              required:
                - targetId
                - targetType
                - content
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  
  /comments/{id}:
    get:
      summary: Get comment by ID
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Comment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update comment
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                status:
                  type: string
                  enum: [active, deleted, pending_review]
              required:
                - content
      responses:
        '200':
          description: Comment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete comment
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Comment deleted
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /comments/{id}/replies:
    get:
      summary: Get replies to a comment
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
            default: createdAt
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
      responses:
        '200':
          description: Comment replies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # CommentLike endpoints
  /comments/{id}/likes:
    get:
      summary: Get likes for a comment
      tags:
        - Comments
        - Likes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Comment likes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentLike'
    
    post:
      summary: Like a comment
      tags:
        - Comments
        - Likes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Comment liked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentLike'
        '400':
          description: Already liked or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Unlike a comment
      tags:
        - Comments
        - Likes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Comment unliked
        '404':
          description: Like not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /comments/{id}/likes/toggle:
    post:
      summary: Toggle like status for a comment
      tags:
        - Comments
        - Likes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Like status toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked:
                    type: boolean
                  like:
                    $ref: '#/components/schemas/CommentLike'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Like endpoints from LikeRepository
  /likes:
    get:
      summary: Get likes
      tags:
        - Likes
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: targetType
          in: query
          schema:
            type: string
            enum: [post, comment, media, article]
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of likes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Like'
    
    post:
      summary: Create like
      tags:
        - Likes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetId:
                  type: string
                  format: uuid
                targetType:
                  type: string
                  enum: [post, comment, media, article]
              required:
                - targetId
                - targetType
      responses:
        '201':
          description: Like created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
        '400':
          description: Already liked or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /likes/{id}:
    get:
      summary: Get like by ID
      tags:
        - Likes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Like details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
        '404':
          description: Like not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete like
      tags:
        - Likes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Like deleted
        '404':
          description: Like not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /likes/toggle:
    post:
      summary: Toggle like status
      tags:
        - Likes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetId:
                  type: string
                  format: uuid
                targetType:
                  type: string
                  enum: [post, comment, media, article]
              required:
                - targetId
                - targetType
      responses:
        '200':
          description: Like status toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked:
                    type: boolean
                  like:
                    $ref: '#/components/schemas/Like'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /likes/recent:
    get:
      summary: Get recent likes
      tags:
        - Likes
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: targetType
          in: query
          schema:
            type: string
            enum: [post, comment, media, article]
      responses:
        '200':
          description: Recent likes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Like'
  
  # Follow endpoints from FollowRepository
  /follows:
    post:
      summary: Create follow relationship
      tags:
        - Follows
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                followerId:
                  type: string
                  format: uuid
                followingId:
                  type: string
                  format: uuid
              required:
                - followerId
                - followingId
      responses:
        '201':
          description: Follow relationship created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
        '400':
          description: Validation error, self follow, or already following
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /follows/{id}:
    get:
      summary: Get follow by ID
      tags:
        - Follows
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Follow details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
        '404':
          description: Follow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /follows/check:
    get:
      summary: Check if user is following another user
      tags:
        - Follows
      parameters:
        - name: followerId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: followingId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Follow status
          content:
            application/json:
              schema:
                type: object
                properties:
                  isFollowing:
                    type: boolean
  
  /follows/toggle:
    post:
      summary: Toggle follow status
      tags:
        - Follows
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                followerId:
                  type: string
                  format: uuid
                followingId:
                  type: string
                  format: uuid
              required:
                - followerId
                - followingId
      responses:
        '200':
          description: Follow status toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  isFollowing:
                    type: boolean
        '400':
          description: Self follow or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{id}/followers:
    get:
      summary: Get user's followers
      tags:
        - Users
        - Follows
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: User's followers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Follow'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{id}/following:
    get:
      summary: Get users followed by user
      tags:
        - Users
        - Follows
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Users followed by user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Follow'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{id}/recent-followers:
    get:
      summary: Get user's recent followers
      tags:
        - Users
        - Follows
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: User's recent followers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Follow'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{id}/recent-following:
    get:
      summary: Get users recently followed by user
      tags:
        - Users
        - Follows
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Users recently followed by user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Follow'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{id1}/mutual-followers/{id2}:
    get:
      summary: Get mutual followers between two users
      tags:
        - Users
        - Follows
      parameters:
        - name: id1
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: id2
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Mutual followers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    username:
                      type: string
                    displayName:
                      type: string
                    profileImage:
                      type: string
                      nullable: true
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /follows/count:
    get:
      summary: Count followers or following
      tags:
        - Follows
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum: [followers, following]
      responses:
        '200':
          description: Count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /follows/batch-count:
    post:
      summary: Batch count followers or following for multiple users
      tags:
        - Follows
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                type:
                  type: string
                  enum: [followers, following]
              required:
                - userIds
                - type
      responses:
        '200':
          description: Batch count results
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
  
  # Bookmark endpoints from BookmarkRepository
  /bookmarks:
    get:
      summary: Get user's bookmarks
      tags:
        - Bookmarks
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: User's bookmarks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bookmark'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create bookmark
      tags:
        - Bookmarks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                targetId:
                  type: string
                  format: uuid
                targetType:
                  type: string
                  enum: [post, comment, media, article, user]
                collectionId:
                  type: string
                  format: uuid
                  nullable: true
                notes:
                  type: string
                  nullable: true
              required:
                - userId
                - targetId
                - targetType
      responses:
        '201':
          description: Bookmark created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  
  /bookmarks/{id}:
    get:
      summary: Get bookmark by ID
      tags:
        - Bookmarks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Bookmark details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
        '404':
          description: Bookmark not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete bookmark
      tags:
        - Bookmarks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Bookmark deleted
        '400':
          description: User does not own bookmark
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Bookmark not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /bookmarks/{id}/notes:
    put:
      summary: Update bookmark notes
      tags:
        - Bookmarks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                notes:
                  type: string
                  nullable: true
              required:
                - userId
                - notes
      responses:
        '200':
          description: Bookmark notes updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
        '400':
          description: User does not own bookmark
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Bookmark not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /bookmarks/{id}/collection:
    put:
      summary: Move bookmark to collection
      tags:
        - Bookmarks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                collectionId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - userId
                - collectionId
      responses:
        '200':
          description: Bookmark moved to collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
        '400':
          description: User does not own bookmark
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Bookmark or collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /bookmarks/check:
    get:
      summary: Check if user has bookmarked content
      tags:
        - Bookmarks
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: targetId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: targetType
          in: query
          required: true
          schema:
            type: string
            enum: [post, comment, media, article, user]
      responses:
        '200':
          description: Bookmark status
          content:
            application/json:
              schema:
                type: object
                properties:
                  bookmarked:
                    type: boolean
                  bookmark:
                    $ref: '#/components/schemas/Bookmark'
                    nullable: true
  
  # Collection endpoints from CollectionRepository
  /collections:
    get:
      summary: Get user's collections
      tags:
        - Collections
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User's collections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create collection
      tags:
        - Collections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                name:
                  type: string
                description:
                  type: string
                  nullable: true
                isPublic:
                  type: boolean
                  default: false
              required:
                - userId
                - name
      responses:
        '201':
          description: Collection created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  
  /collections/{id}:
    get:
      summary: Get collection by ID
      tags:
        - Collections
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update collection
      tags:
        - Collections
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
                isPublic:
                  type: boolean
              required:
                - name
      responses:
        '200':
          description: Collection updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete collection
      tags:
        - Collections
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Collection deleted
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /collections/{id}/bookmarks:
    get:
      summary: Get bookmarks in collection
      tags:
        - Collections
        - Bookmarks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Collection bookmarks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bookmark'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Hashtag endpoints from HashtagRepository
  /hashtags:
    get:
      summary: List hashtags
      tags:
        - Hashtags
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of hashtags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hashtag'
  
  /hashtags/trending:
    get:
      summary: Get trending hashtags
      tags:
        - Hashtags
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Trending hashtags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hashtag'
  
  /hashtags/{tag}:
    get:
      summary: Get hashtag by tag
      tags:
        - Hashtags
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hashtag details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hashtag'
        '404':
          description: Hashtag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /hashtags/{id}/category:
    put:
      summary: Update hashtag category
      tags:
        - Hashtags
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  enum: [GENERAL, TECH, ARTS, SPORTS, TRAVEL, FOOD, HEALTH, BUSINESS, EDUCATION, OTHER]
              required:
                - category
      responses:
        '200':
          description: Hashtag category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hashtag'
        '404':
          description: Hashtag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /hashtags/{tag}/posts:
    get:
      summary: Get posts with hashtag
      tags:
        - Hashtags
        - Posts
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Posts with hashtag
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '404':
          description: Hashtag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /hashtags/{tag}/related:
    get:
      summary: Get related hashtags
      tags:
        - Hashtags
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Related hashtags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tag:
                      type: string
                    correlation:
                      type: number
        '404':
          description: Hashtag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /hashtags/{tag}/stats:
    get:
      summary: Get hashtag statistics
      tags:
        - Hashtags
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hashtag statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  usageCount:
                    type: integer
                  postsCount:
                    type: integer
                  uniqueUsers:
                    type: integer
                  category:
                    type: string
                  avgEngagement:
                    type: number
                  lastUsedAt:
                    type: string
                    format: date-time
        '404':
          description: Hashtag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /hashtags/{tag}/top-users:
    get:
      summary: Get top users for a hashtag
      tags:
        - Hashtags
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Top users for hashtag
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: string
                      format: uuid
                    count:
                      type: integer
        '404':
          description: Hashtag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /hashtags/{tag}/hourly-usage:
    get:
      summary: Get hourly usage statistics
      tags:
        - Hashtags
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hourly usage statistics
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
        '404':
          description: Hashtag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /hashtags/{tag}/daily-usage:
    get:
      summary: Get daily usage statistics
      tags:
        - Hashtags
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Daily usage statistics
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
        '404':
          description: Hashtag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /hashtags/batch-stats:
    post:
      summary: Get statistics for multiple hashtags
      tags:
        - Hashtags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
              required:
                - tags
      responses:
        '200':
          description: Batch hashtag statistics
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    usageCount:
                      type: integer
                    postsCount:
                      type: integer
                    uniqueUsers:
                      type: integer
                    category:
                      type: string
                    avgEngagement:
                      type: number
                    lastUsedAt:
                      type: string
                      format: date-time
  
  # Notification endpoints from NotificationRepository
  /notifications:
    get:
      summary: Get user notifications
      tags:
        - Notifications
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: unreadOnly
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: User notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      unreadCount:
                        type: integer
                      offset:
                        type: integer
                      limit:
                        type: integer
  
  /notifications/unread-count:
    get:
      summary: Get unread notification count
      tags:
        - Notifications
      responses:
        '200':
          description: Unread notification count
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
  
  /notifications/{id}:
    get:
      summary: Get notification by ID
      tags:
        - Notifications
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete notification
      tags:
        - Notifications
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Notification deleted
        '400':
          description: User mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /notifications/{id}/read:
    post:
      summary: Mark notification as read
      tags:
        - Notifications
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
              required:
                - userId
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400':
          description: User mismatch or already read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /notifications/read-all:
    post:
      summary: Mark all notifications as read
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
              required:
                - userId
      responses:
        '200':
          description: All notifications marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Number of notifications marked as read
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /notifications/delete-all:
    post:
      summary: Delete all notifications for a user
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
type: string
                  format: uuid
              required:
                - userId
      responses:
        '200':
          description: All notifications deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Number of notifications deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /notifications/preferences:
    get:
      summary: Get notification preferences for a user
      tags:
        - Notifications
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification preferences
          content:
            application/json:
              schema:
                type: object
                properties:
                  likes:
                    type: boolean
                  comments:
                    type: boolean
                  follows:
                    type: boolean
                  mentions:
                    type: boolean
                  messages:
                    type: boolean
                  email:
                    type: boolean
                  push:
                    type: boolean
                  digestFrequency:
                    type: string
                    enum: [realtime, daily, weekly]
                  quietHours:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                      start:
                        type: string
                      end:
                        type: string
                      timezone:
                        type: string
                  channels:
                    type: object
                    properties:
                      inApp:
                        type: boolean
                      email:
                        type: boolean
                      push:
                        type: boolean
                      sms:
                        type: boolean
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update notification preferences for a user
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                preferences:
                  type: object
                  properties:
                    likes:
                      type: boolean
                    comments:
                      type: boolean
                    follows:
                      type: boolean
                    mentions:
                      type: boolean
                    messages:
                      type: boolean
                    email:
                      type: boolean
                    push:
                      type: boolean
                    digestFrequency:
                      type: string
                      enum: [realtime, daily, weekly]
                    quietHours:
                      type: object
                      properties:
                        enabled:
                          type: boolean
                        start:
                          type: string
                        end:
                          type: string
                        timezone:
                          type: string
                    channels:
                      type: object
                      properties:
                        inApp:
                          type: boolean
                        email:
                          type: boolean
                        push:
                          type: boolean
                        sms:
                          type: boolean
              required:
                - userId
                - preferences
      responses:
        '200':
          description: Notification preferences updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /notifications/batch-count-unread:
    post:
      summary: Batch count unread notifications for multiple users
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - userIds
      responses:
        '200':
          description: Batch unread counts
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
  
  /notifications/recent:
    get:
      summary: Find recent notifications of a specific type
      tags:
        - Notifications
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum: [LIKE, COMMENT, FOLLOW, MENTION, MESSAGE, SYSTEM]
        - name: since
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Recent notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /notifications/oldest:
    get:
      summary: Find oldest notifications for a user
      tags:
        - Notifications
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Oldest notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /notifications/date-range:
    get:
      summary: Find notifications by user within a date range
      tags:
        - Notifications
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Notifications within date range
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /notifications/entity/{entityId}:
    delete:
      summary: Delete notifications by entity ID and type
      tags:
        - Notifications
      parameters:
        - name: entityId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: entityType
          in: query
          required: true
          schema:
            type: string
            enum: [user, post, comment, media, group, message]
      responses:
        '204':
          description: Notifications deleted
        '400':
          description: Invalid entity type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Search and discovery endpoints
  /search:
    get:
      summary: Search across all content
      tags:
        - Search
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [user, post, media, group, comment, tag]
        - name: tags
          in: query
          schema:
            type: array
            items:
              type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum: [user, post, media, group, comment, tag]
                        title:
                          type: string
                        description:
                          type: string
                        ownerId:
                          type: string
                          format: uuid
                        createdAt:
                          type: string
                          format: date-time
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
  
  /search/recent:
    get:
      summary: Get recent content
      tags:
        - Search
      parameters:
        - name: type
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [user, post, media, group, comment, tag]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Recent content
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum: [user, post, media, group, comment, tag]
                        title:
                          type: string
                        description:
                          type: string
                        ownerId:
                          type: string
                          format: uuid
                        createdAt:
                          type: string
                          format: date-time
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
  
  /search/tags/{tag}:
    get:
      summary: Search by tag
      tags:
        - Search
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [user, post, media, group, comment, tag]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum: [user, post, media, group, comment, tag]
                        title:
                          type: string
                        description:
                          type: string
                        ownerId:
                          type: string
                          format: uuid
                        createdAt:
                          type: string
                          format: date-time
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
  
  # Media endpoints
  /media:
    get:
      summary: Get media items
      tags:
        - Media
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: type
          in: query
          schema:
            type: string
            enum: [image, video, audio]
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: isPublic
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of media items
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        userId:
                          type: string
                          format: uuid
                        type:
                          type: string
                          enum: [image, video, audio]
                        originalFilename:
                          type: string
                        filename:
                          type: string
                        path:
                          type: string
                        mimeType:
                          type: string
                        size:
                          type: integer
                        width:
                          type: integer
                          nullable: true
                        height:
                          type: integer
                          nullable: true
                        duration:
                          type: number
                          nullable: true
                        isPublic:
                          type: boolean
                        createdAt:
                          type: string
                          format: date-time
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
    
    post:
      summary: Upload media
      tags:
        - Media
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                type:
                  type: string
                  enum: [image, video, audio]
                isPublic:
                  type: boolean
                  default: true
                title:
                  type: string
                description:
                  type: string
              required:
                - file
                - type
      responses:
        '201':
          description: Media uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  userId:
                    type: string
                    format: uuid
                  type:
                    type: string
                    enum: [image, video, audio]
                  originalFilename:
                    type: string
                  filename:
                    type: string
                  path:
                    type: string
                  mimeType:
                    type: string
                  size:
                    type: integer
                  isPublic:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  
  /media/{id}:
    get:
      summary: Get media by ID
      tags:
        - Media
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Media details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  userId:
                    type: string
                    format: uuid
                  type:
                    type: string
                    enum: [image, video, audio]
                  originalFilename:
                    type: string
                  filename:
                    type: string
                  path:
                    type: string
                  mimeType:
                    type: string
                  size:
                    type: integer
                  width:
                    type: integer
                    nullable: true
                  height:
                    type: integer
                    nullable: true
                  duration:
                    type: number
                    nullable: true
                  isPublic:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
        '404':
          description: Media not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update media
      tags:
        - Media
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                isPublic:
                  type: boolean
      responses:
        '200':
          description: Media updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  description:
                    type: string
                  isPublic:
                    type: boolean
        '404':
          description: Media not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete media
      tags:
        - Media
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Media deleted
        '404':
          description: Media not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Message endpoints from MessageRepository
  /messages:
    post:
      summary: Create message
      tags:
        - Messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conversationId:
                  type: string
                  format: uuid
                senderId:
                  type: string
                  format: uuid
                content:
                  type: string
              required:
                - conversationId
                - senderId
                - content
      responses:
        '201':
          description: Message created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  
  /messages/{id}:
    get:
      summary: Get message by ID
      tags:
        - Messages
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Message details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update message
      tags:
        - Messages
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        '200':
          description: Message updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete message
      tags:
        - Messages
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Message deleted
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # User settings endpoints
  /users/{id}/settings:
    get:
      summary: Get user settings
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                type: object
                properties:
                  theme:
                    type: string
                  language:
                    type: string
                  timezone:
                    type: string
                  emailNotifications:
                    type: boolean
                  pushNotifications:
                    type: boolean
                  privacySettings:
                    type: object
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update user settings
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                theme:
                  type: string
                language:
                  type: string
                timezone:
                  type: string
                emailNotifications:
                  type: boolean
                pushNotifications:
                  type: boolean
                privacySettings:
                  type: object
      responses:
        '200':
          description: User settings updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  theme:
                    type: string
                  language:
                    type: string
                  timezone:
                    type: string
                  emailNotifications:
                    type: boolean
                  pushNotifications:
                    type: boolean
                  privacySettings:
                    type: object
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # User stats endpoints
  /users/{id}/stats:
    get:
      summary: Get user stats
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User stats
          content:
            application/json:
              schema:
                type: object
                properties:
                  postCount:
                    type: integer
                  followerCount:
                    type: integer
                  followingCount:
                    type: integer
                  likeCount:
                    type: integer
                  commentCount:
                    type: integer
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'