{
  "React Functional Component": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "import './${TM_FILENAME_BASE}.css';",
      "",
      "interface ${TM_FILENAME_BASE}Props {",
      "  $1",
      "}",
      "",
      "export const ${TM_FILENAME_BASE}: React.FC<${TM_FILENAME_BASE}Props> = ({ $2 }) => {",
      "  return (",
      "    <div className=\"${TM_FILENAME_BASE/([A-Z])([a-zA-Z0-9]+)|([A-Z])/(?1${1:/downcase}-$2)(?3${3:/downcase})/g}\"$0>",
      "      $3",
      "    </div>",
      "  );",
      "};",
    ],
    "description": "React Functional Component with TypeScript",
  },
  "React Hook": {
    "prefix": "rhook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "export function use${1:Hook}($2) {",
      "  const [state, setState] = useState($3);",
      "",
      "  useEffect(() => {",
      "    $4",
      "    ",
      "    return () => {",
      "      $5",
      "    };",
      "  }, [$6]);",
      "",
      "  return state;",
      "}",
    ],
    "description": "React Custom Hook",
  },
  "Express Route": {
    "prefix": "route",
    "body": [
      "import express from 'express';",
      "import { ${1:controller}Controller } from '../controllers/${1:controller}Controller';",
      "import { authMiddleware } from '../middleware/authMiddleware';",
      "",
      "const router = express.Router();",
      "",
      "// Public routes",
      "router.get('/', ${1:controller}Controller.getAll);",
      "router.get('/:id', ${1:controller}Controller.getById);",
      "",
      "// Protected routes",
      "router.post('/', authMiddleware, ${1:controller}Controller.create);",
      "router.put('/:id', authMiddleware, ${1:controller}Controller.update);",
      "router.delete('/:id', authMiddleware, ${1:controller}Controller.delete);",
      "",
      "export default router;",
    ],
    "description": "Express Router Module",
  },
  "Service Method": {
    "prefix": "smethod",
    "body": [
      "async ${1:methodName}($2): Promise<$3> {",
      "  try {",
      "    $4",
      "  } catch (error) {",
      "    console.error(`Error in ${1:methodName}:`, error);",
      "    throw error;",
      "  }",
      "}",
    ],
    "description": "Service Method with Error Handling",
  },
  "Controller Method": {
    "prefix": "cmethod",
    "body": [
      "${1:methodName}: asyncHandler(async (req: Request, res: Response) => {",
      "  $2",
      "  res.status(${3:200}).json($4);",
      "})",
    ],
    "description": "Controller Method with async handler",
  },
  "React useState": {
    "prefix": "ust",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/pascalcase}/}] = useState<${2:type}>(${3:initialValue});",
    ],
    "description": "React useState Hook with TypeScript",
  },
  "React useEffect": {
    "prefix": "uef",
    "body": [
      "useEffect(() => {",
      "  $1",
      "  ",
      "  return () => {",
      "    $2",
      "  };",
      "}, [$3]);",
    ],
    "description": "React useEffect Hook with Cleanup",
  },
  "Try-Catch Block": {
    "prefix": "tryc",
    "body": [
      "try {",
      "  $1",
      "} catch (error) {",
      "  console.error('${2:Error message}:', error);",
      "  $3",
      "}",
    ],
    "description": "Try-Catch Block with Error Logging",
  },
  "Import React": {
    "prefix": "imr",
    "body": ["import React from 'react';"],
    "description": "Import React",
  },
  "Import React Hooks": {
    "prefix": "imrh",
    "body": ["import { ${1:useState, useEffect, useContext} } from 'react';"],
    "description": "Import React Hooks",
  },
  "TypeScript Interface": {
    "prefix": "interface",
    "body": [
      "interface ${1:InterfaceName} {",
      "  ${2:property}: ${3:type};$0",
      "}",
    ],
    "description": "TypeScript Interface",
  },
  "Jest Test": {
    "prefix": "test",
    "body": [
      "describe('${1:Description}', () => {",
      "  test('${2:test description}', () => {",
      "    $0",
      "  });",
      "});",
    ],
    "description": "Jest Test Block",
  },
}
